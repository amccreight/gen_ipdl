use ast::{Compress, CxxTypeKind, Direction, IncludeType, MessageDecl,
MessageModifier, PreambleStmt, Namespace, Nesting, TopLevelDecl,
ParserState, Param, Priority, Protocol, QualifiedId, SendSemantics,
StructField, TranslationUnit, TypeSpec};
extern crate lalrpop_util as ___lalrpop_util;
mod ___parse___TranslationUnit {
#![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]
use ast::{Compress, CxxTypeKind, Direction, IncludeType, MessageDecl,
MessageModifier, PreambleStmt, Namespace, Nesting, TopLevelDecl,
ParserState, Param, Priority, Protocol, QualifiedId, SendSemantics,
StructField, TranslationUnit, TypeSpec};
extern crate lalrpop_util as ___lalrpop_util;
#[allow(dead_code)]
pub enum ___Symbol<'input> {
Term_22_28_22(&'input str),
Term_22_29_22(&'input str),
Term_22_2c_22(&'input str),
Term_22_3a_22(&'input str),
Term_22_3a_3a_22(&'input str),
Term_22_3b_22(&'input str),
Term_22_3c_22(&'input str),
Term_22_3e_22(&'input str),
Term_22_5b_22(&'input str),
Term_22_5d_22(&'input str),
Term_22____delete_____22(&'input str),
Term_22async_22(&'input str),
Term_22both_22(&'input str),
Term_22child_22(&'input str),
Term_22class_22(&'input str),
Term_22compress_22(&'input str),
Term_22compressall_22(&'input str),
Term_22from_22(&'input str),
Term_22high_22(&'input str),
Term_22include_22(&'input str),
Term_22inside__cpow_22(&'input str),
Term_22inside__sync_22(&'input str),
Term_22intr_22(&'input str),
Term_22manager_22(&'input str),
Term_22manages_22(&'input str),
Term_22namespace_22(&'input str),
Term_22nested_22(&'input str),
Term_22normal_22(&'input str),
Term_22not_22(&'input str),
Term_22nullable_22(&'input str),
Term_22or_22(&'input str),
Term_22parent_22(&'input str),
Term_22prio_22(&'input str),
Term_22protocol_22(&'input str),
Term_22returns_22(&'input str),
Term_22struct_22(&'input str),
Term_22sync_22(&'input str),
Term_22union_22(&'input str),
Term_22upto_22(&'input str),
Term_22using_22(&'input str),
Term_22verify_22(&'input str),
Term_22_7b_22(&'input str),
Term_22_7d_22(&'input str),
Termr_23_22_5c_22_5b_5e_5c_22_5c_5cn_5d_2a_5c_22_22_23(&'input str),
Termr_23_22_5ba_2dzA_2dZ___5d_5ba_2dzA_2dZ0_2d9___5d_2a_22_23(&'input str),
Nt_22nullable_22_3f(::std::option::Option<&'input str>),
Nt_28_22_5b_22_20_22_5d_22_29((&'input str, &'input str)),
Nt_28_22_5b_22_20_22_5d_22_29_3f(::std::option::Option<(&'input str, &'input str)>),
Nt_28PreambleStmt_20_22_3b_22_29((PreambleStmt, &'input str)),
Nt_28PreambleStmt_20_22_3b_22_29_2a(::std::vec::Vec<(PreambleStmt, &'input str)>),
Nt_28PreambleStmt_20_22_3b_22_29_2b(::std::vec::Vec<(PreambleStmt, &'input str)>),
Nt_28StructField_20_22_3b_22_29((StructField, &'input str)),
Nt_28StructField_20_22_3b_22_29_2a(::std::vec::Vec<(StructField, &'input str)>),
Nt_28StructField_20_22_3b_22_29_2b(::std::vec::Vec<(StructField, &'input str)>),
Nt_28Type_20_22_3b_22_29((TypeSpec, &'input str)),
Nt_28Type_20_22_3b_22_29_2b(::std::vec::Vec<(TypeSpec, &'input str)>),
NtBasicType(TypeSpec),
NtCxxID(String),
NtCxxIncludeStmt(PreambleStmt),
NtCxxTemplateInst(String),
NtCxxType(TypeSpec),
NtCxxTypeKind(CxxTypeKind),
NtID(String),
NtIncludeStmt(PreambleStmt),
NtManagerList(Vec<String>),
NtManagersStmtOpt(Vec<String>),
NtManagesStmt(String),
NtManagesStmt_3f(::std::option::Option<String>),
NtMessageBody(MessageDecl),
NtMessageDecl(MessageDecl),
NtMessageDeclThing(MessageDecl),
NtMessageDeclThing_2a(::std::vec::Vec<MessageDecl>),
NtMessageDeclThing_2b(::std::vec::Vec<MessageDecl>),
NtMessageDirectionLabel(()),
NtMessageId(String),
NtMessageModifier(MessageModifier),
NtMessageModifier_2a(::std::vec::Vec<MessageModifier>),
NtMessageModifier_2b(::std::vec::Vec<MessageModifier>),
NtMessageOutParams(Vec<Param>),
NtNamespaceThing(Vec<(Namespace, TopLevelDecl)>),
NtNamespaceThing_2b(::std::vec::Vec<Vec<(Namespace, TopLevelDecl)>>),
NtNesting(Nesting),
NtParam(Param),
NtParamList(Vec<Param>),
NtPreamble(Vec<PreambleStmt>),
NtPreambleStmt(PreambleStmt),
NtPriority(Priority),
NtProtocolDefn((Namespace, Protocol)),
NtProtocolSendSemanticsQual((Nesting, SendSemantics)),
NtProtocolSendSemanticsQual_3f(::std::option::Option<(Nesting, SendSemantics)>),
NtQualifiedID(QualifiedId),
NtSTRING(String),
NtSendQualifier((Option<Nesting>, Option<Priority>)),
NtSendQualifierList((Option<Nesting>, Option<Priority>)),
NtSendSemanticsQual((Nesting, Priority, SendSemantics)),
NtStructDecl((Namespace, Vec<StructField>)),
NtStructField(StructField),
NtTranslationUnit(TranslationUnit),
NtType(TypeSpec),
NtUnionDecl((Namespace, Vec<TypeSpec>)),
NtUsingStmt(PreambleStmt),
Nt______TranslationUnit(TranslationUnit),
}
const ___ACTION: &'static [i32] = &[
0,0,0,0,0,0,0,0,0,0,0,-75,0,0,0,0,0,0,0,9,0,0,-75,0,0,-75,-75,0,0,0,0,0,0,-75,0,-75,-75,-75,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-76,0,0,0,0,0,0,0,9,0,0,-76,0,0,-76,-76,0,0,0,0,0,0,-76,0,-76,-76,-76,0,10,0,0,0,0,0,0,0,0,0,0,-77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,19,0,0,20,21,0,0,0,0,0,0,22,0,23,24,25,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,40,0,0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-66,0,0,0,0,0,0,0,0,0,0,-66,0,0,-66,-66,0,0,0,0,0,0,-66,0,-66,-66,-66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,19,0,0,20,21,0,0,0,0,0,0,22,0,23,24,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-65,0,0,0,0,0,0,0,0,0,0,-65,0,0,-65,-65,0,0,0,0,0,0,-65,0,-65,-65,-65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-63,0,0,0,0,0,0,0,0,0,0,-63,0,0,-63,-63,0,0,0,0,0,0,-63,0,-63,-63,-63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-64,0,0,0,0,0,0,0,0,0,0,-64,0,0,-64,-64,0,0,0,0,0,0,-64,0,-64,-64,-64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,-9,0,0,0,0,0,0,0,-9,0,0,-9,0,0,-9,-9,0,0,0,0,0,0,-9,0,-9,-9,-9,0,-9,0,0,0,0,0,0,0,0,0,0,-31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,-99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,-26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-22,0,0,0,0,0,0,0,0,0,0,0,0,-22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,-21,0,54,0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,-25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-28,0,0,0,0,-29,0,-29,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,0,0,0,0,0,-10,0,0,-10,0,0,-10,-10,0,0,0,0,0,0,-10,0,-10,-10,-10,0,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-67,0,0,0,0,0,0,0,0,0,0,-67,0,0,-67,-67,0,0,0,0,0,0,-67,0,-67,-67,-67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,0,-30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,19,0,0,75,21,0,0,0,0,0,0,76,0,77,24,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,81,0,0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-35,-35,-35,0,0,0,0,0,0,0,0,-35,84,-35,0,-35,0,0,0,0,-35,-35,0,0,0,-35,0,0,0,0,0,-35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,93,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,-98,0,0,0,0,0,0,0,0,0,0,0,0,-98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-97,0,0,0,0,0,0,0,0,0,0,0,0,-97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-35,-35,-35,0,0,0,0,0,0,0,0,-35,84,-35,0,-35,0,0,0,0,-35,-35,0,0,0,-35,0,0,0,0,0,-35,0,0,0,0,0,0,0,0,0,0,0,0,0,-66,0,0,0,0,0,0,0,0,0,0,-66,0,0,-66,-66,0,0,0,0,0,0,-66,0,-66,-66,-66,0,0,0,0,-66,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,19,0,0,75,21,0,0,0,0,0,0,76,0,77,24,78,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,-65,0,0,0,0,0,0,0,0,0,0,-65,0,0,-65,-65,0,0,0,0,0,0,-65,0,-65,-65,-65,0,0,0,0,-65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-63,0,0,0,0,0,0,0,0,0,0,-63,0,0,-63,-63,0,0,0,0,0,0,-63,0,-63,-63,-63,0,0,0,0,-63,0,0,0,0,0,0,0,0,0,0,0,0,0,-64,0,0,0,0,0,0,0,0,0,0,-64,0,0,-64,-64,0,0,0,0,0,0,-64,0,-64,-64,-64,0,0,0,0,-64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,125,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,134,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-112,0,0,0,0,0,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-20,0,0,0,0,0,0,0,0,-22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-22,0,0,0,0,0,0,136,0,-21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,142,0,102,0,0,0,0,0,-112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-20,0,0,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-22,0,0,-22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-21,144,0,-21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,-29,-29,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-24,0,0,0,0,0,0,0,0,0,0,0,0,-24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,125,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,-67,0,0,0,0,0,0,0,0,0,0,-67,0,0,-67,-67,0,0,0,0,0,0,-67,0,-67,-67,-67,0,0,0,0,-67,0,0,0,0,0,0,0,0,0,0,0,0,0,-62,0,0,0,0,0,0,0,0,0,0,-62,0,0,-62,-62,0,0,0,0,0,0,-62,0,-62,-62,-62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,158,0,0,0,0,0,0,0,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-46,-46,-46,0,0,0,0,0,0,0,0,-46,0,0,0,-46,0,0,0,0,-46,-46,0,0,0,-46,0,0,0,0,0,-46,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,161,0,0,0,0,0,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,0,0,0,0,128,0,0,0,-103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,0,0,0,-50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-14,0,0,0,0,0,0,0,0,0,0,0,0,-14,0,-14,0,0,0,0,0,-109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-111,0,0,0,0,0,0,0,0,0,0,0,-107,0,0,0,0,0,0,0,0,0,0,-107,0,0,-107,-107,0,0,0,0,0,0,-107,0,-107,-107,-107,0,0,0,0,0,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-17,0,0,0,0,0,0,0,0,0,0,0,0,-17,0,-17,0,0,0,0,0,-111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,187,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,19,0,0,75,21,0,0,0,0,0,0,76,0,77,24,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-35,-35,-35,0,0,0,0,0,0,0,0,-35,84,-35,0,-35,0,0,0,0,-35,-35,0,0,0,-35,0,0,0,0,0,-35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,193,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,195,0,0,0,0,0,0,0,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43,-43,-43,0,0,0,0,0,0,0,0,-43,0,0,0,-43,0,0,0,0,-43,-43,0,0,0,-43,0,0,0,0,0,-43,0,0,0,0,0,0,0,0,0,0,0,0,0,-47,-47,-47,0,0,0,0,0,0,0,0,-47,0,0,0,-47,0,0,0,0,-47,-47,0,0,0,-47,0,0,0,0,0,-47,0,0,0,0,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,0,0,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,0,128,0,0,0,-103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-104,0,0,0,0,0,0,0,0,0,0,-105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-105,-51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,81,0,0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,0,0,0,0,0,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-87,0,0,0,0,0,0,0,0,0,0,-87,0,0,-87,-87,0,0,0,0,0,0,-87,0,-87,-87,-87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-34,-34,-34,0,0,0,0,0,0,0,0,-34,0,-34,0,-34,0,0,0,0,-34,-34,0,0,0,-34,0,0,0,0,0,-34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,-15,0,0,0,0,0,0,0,0,0,0,0,-108,0,0,0,0,0,0,0,0,0,0,-108,0,0,-108,-108,0,0,0,0,0,0,-108,0,-108,-108,-108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-19,0,0,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-18,0,0,0,0,0,0,0,0,0,0,0,0,-18,0,-18,0,0,0,0,0,0,0,0,0,0,0,-113,0,0,0,0,0,0,0,0,0,0,-113,0,0,-113,-113,0,0,0,0,0,0,-113,0,-113,-113,-113,0,0,0,0,0,0,0,0,0,0,0,0,-19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,208,0,0,0,0,0,0,0,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-86,0,0,0,0,0,0,0,0,0,0,-86,0,0,-86,-86,0,0,0,0,0,0,-86,0,-86,-86,-86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-35,-35,-35,0,0,0,0,0,0,0,0,-35,84,-35,0,-35,0,0,0,0,-35,-35,0,0,0,-35,0,0,0,0,0,-35,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,19,0,0,75,21,0,0,0,0,0,0,76,0,77,24,78,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,125,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,216,0,94,0,0,0,0,0,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,218,0,102,0,0,0,0,0,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-83,0,0,0,0,0,0,0,0,0,0,-83,0,0,-83,-83,0,0,0,0,0,0,-83,0,-83,-83,-83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-89,0,0,0,0,0,0,0,0,0,0,-89,0,0,-89,-89,0,0,0,0,0,0,-89,0,-89,-89,-89,0,0,0,0,0,0,0,0,0,0,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-74,-74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,-36,-36,-36,0,0,0,0,0,0,0,0,-36,0,0,0,-36,0,0,0,0,-36,-36,0,0,0,-36,0,0,0,0,0,-36,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-24,0,0,0,0,0,-24,0,0,-24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-82,0,0,0,0,0,0,0,0,0,0,-82,0,0,-82,-82,0,0,0,0,0,0,-82,0,-82,-82,-82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,0,0,0,0,0,0,0,0,0,0,-88,0,0,-88,-88,0,0,0,0,0,0,-88,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,125,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,229,0,0,0,0,0,0,0,0,0,0,0,0,0,-62,0,0,0,0,0,0,0,0,0,0,-62,0,0,-62,-62,0,0,0,0,0,0,-62,0,-62,-62,-62,0,0,0,0,-62,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,232,0,0,0,0,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-107,0,0,0,0,0,0,0,0,0,0,-107,0,0,-107,-107,0,0,0,0,0,0,-107,0,-107,-107,-107,0,0,0,0,-107,0,0,0,0,0,0,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-85,0,0,0,0,0,0,0,0,0,0,-85,0,0,-85,-85,0,0,0,0,0,0,-85,0,-85,-85,-85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-42,-42,-42,0,0,0,0,0,0,0,0,-42,0,0,0,-42,0,0,0,0,-42,-42,0,0,0,-42,0,0,0,0,0,-42,0,0,0,-73,-73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0,-100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-100,0,0,0,0,0,-100,0,0,0,-100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-101,0,0,0,0,0,-101,0,0,0,-101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-84,0,0,0,0,0,0,0,0,0,0,-84,0,0,-84,-84,0,0,0,0,0,0,-84,0,-84,-84,-84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,241,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,242,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,244,0,0,0,0,0,0,0,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-87,0,0,0,0,0,0,0,0,0,0,-87,0,0,-87,-87,0,0,0,0,0,0,-87,0,-87,-87,-87,0,0,0,0,-87,0,0,0,0,0,0,0,0,0,0,0,0,0,-108,0,0,0,0,0,0,0,0,0,0,-108,0,0,-108,-108,0,0,0,0,0,0,-108,0,-108,-108,-108,0,0,0,0,-108,0,0,0,0,0,0,0,0,0,0,0,0,0,-113,0,0,0,0,0,0,0,0,0,0,-113,0,0,-113,-113,0,0,0,0,0,0,-113,0,-113,-113,-113,0,0,0,0,-113,0,0,0,0,0,0,0,-61,0,0,0,0,0,0,0,0,0,-61,-61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,0,0,0,0,0,-61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,-71,-71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,122,123,0,0,0,0,0,0,0,0,124,0,0,0,126,0,0,0,0,127,128,0,0,0,-103,0,0,0,0,0,250,0,0,0,0,0,0,0,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-86,0,0,0,0,0,0,0,0,0,0,-86,0,0,-86,-86,0,0,0,0,0,0,-86,0,-86,-86,-86,0,0,0,0,-86,0,0,0,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-83,0,0,0,0,0,0,0,0,0,0,-83,0,0,-83,-83,0,0,0,0,0,0,-83,0,-83,-83,-83,0,0,0,0,-83,0,0,0,0,0,0,0,0,0,0,0,0,0,-89,0,0,0,0,0,0,0,0,0,0,-89,0,0,-89,-89,0,0,0,0,0,0,-89,0,-89,-89,-89,0,0,0,0,-89,0,0,0,0,0,0,0,-39,0,0,0,0,0,0,0,0,0,256,257,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,258,0,0,0,0,259,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-72,-72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,260,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-82,0,0,0,0,0,0,0,0,0,0,-82,0,0,-82,-82,0,0,0,0,0,0,-82,0,-82,-82,-82,0,0,0,0,-82,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,0,0,0,0,0,0,0,0,0,0,-88,0,0,-88,-88,0,0,0,0,0,0,-88,0,-88,-88,-88,0,0,0,0,-88,0,0,0,0,0,0,0,0,0,0,0,0,0,-85,0,0,0,0,0,0,0,0,0,0,-85,0,0,-85,-85,0,0,0,0,0,0,-85,0,-85,-85,-85,0,0,0,0,-85,0,0,0,0,0,0,0,-58,0,0,0,0,0,0,0,0,0,-58,-58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-58,0,0,0,0,0,0,0,0,0,-40,0,0,0,0,0,0,0,0,0,256,257,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,-54,0,0,0,0,0,0,0,0,0,-54,-54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-54,0,0,0,0,0,0,0,0,0,-55,0,0,0,0,0,0,0,0,0,-55,-55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-55,0,0,0,0,0,0,0,0,0,-53,0,0,0,0,0,0,0,0,0,-53,-53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-53,0,0,0,0,0,-74,-74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,-84,0,0,0,0,0,0,0,0,0,0,-84,0,0,-84,-84,0,0,0,0,0,0,-84,0,-84,-84,-84,0,0,0,0,-84,0,0,0,0,0,0,0,-59,0,0,0,0,0,0,0,0,0,-59,-59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-59,0,0,0,0,0,263,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-60,0,0,0,0,0,0,0,0,0,-60,-60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-60,0,0,0,0,];
const ___EOF_ACTION: &'static [i32] = &[
0,0,0,0,0,0,-116,0,0,0,0,-66,-110,-65,0,-63,-64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-87,0,0,0,-108,0,0,0,-113,0,0,0,0,0,-86,0,0,0,0,0,0,0,-83,-89,0,0,0,0,0,0,0,0,0,0,0,-82,-88,0,0,0,0,0,0,0,0,-85,0,0,0,0,0,0,-84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,];
const ___GOTO: &'static [i32] = &[
0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,7,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,0,0,0,0,0,0,14,15,0,0,0,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,33,34,35,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,14,15,0,0,0,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,33,53,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,33,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,33,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,70,0,0,0,0,0,0,71,72,0,0,0,0,0,0,73,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,86,87,0,88,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,95,96,97,0,98,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,71,72,0,0,0,0,0,0,73,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,0,0,115,116,0,117,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,87,0,88,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,87,0,88,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,97,0,98,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,97,0,98,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,0,0,115,116,0,148,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,0,157,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,160,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,0,0,0,0,0,167,0,0,0,0,0,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,0,185,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,160,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,190,0,0,0,0,0,0,71,72,0,0,0,0,0,0,73,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,86,87,0,88,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,194,96,97,0,98,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,160,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,160,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,71,72,0,0,0,0,0,0,73,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,115,116,0,214,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,87,0,88,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,97,0,98,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,87,0,88,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,0,0,115,116,0,228,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,0,230,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,160,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,0,240,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,160,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,160,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,87,0,88,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,160,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,261,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,87,0,88,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,];
pub fn parse_TranslationUnit<
'input,
>(
parser_state: &ParserState,
input: &'input str,
) -> Result<TranslationUnit, ___lalrpop_util::ParseError<usize,(usize, &'input str),()>>
{
let mut ___tokens = super::___intern_token::___Matcher::new(input);
let mut ___states = vec![0_i32];
let mut ___symbols = vec![];
'___shift: loop {
let ___lookahead = match ___tokens.next() {
Some(Ok(v)) => v,
None => break '___shift,
Some(Err(e)) => return Err(e),
};
let ___integer = match ___lookahead {
(_, (0, _), _) if true => 0,
(_, (1, _), _) if true => 1,
(_, (2, _), _) if true => 2,
(_, (3, _), _) if true => 3,
(_, (4, _), _) if true => 4,
(_, (5, _), _) if true => 5,
(_, (6, _), _) if true => 6,
(_, (7, _), _) if true => 7,
(_, (8, _), _) if true => 8,
(_, (9, _), _) if true => 9,
(_, (10, _), _) if true => 10,
(_, (11, _), _) if true => 11,
(_, (12, _), _) if true => 12,
(_, (13, _), _) if true => 13,
(_, (14, _), _) if true => 14,
(_, (15, _), _) if true => 15,
(_, (16, _), _) if true => 16,
(_, (17, _), _) if true => 17,
(_, (18, _), _) if true => 18,
(_, (19, _), _) if true => 19,
(_, (20, _), _) if true => 20,
(_, (21, _), _) if true => 21,
(_, (22, _), _) if true => 22,
(_, (23, _), _) if true => 23,
(_, (24, _), _) if true => 24,
(_, (25, _), _) if true => 25,
(_, (26, _), _) if true => 26,
(_, (27, _), _) if true => 27,
(_, (28, _), _) if true => 28,
(_, (29, _), _) if true => 29,
(_, (30, _), _) if true => 30,
(_, (31, _), _) if true => 31,
(_, (32, _), _) if true => 32,
(_, (33, _), _) if true => 33,
(_, (34, _), _) if true => 34,
(_, (35, _), _) if true => 35,
(_, (36, _), _) if true => 36,
(_, (37, _), _) if true => 37,
(_, (38, _), _) if true => 38,
(_, (39, _), _) if true => 39,
(_, (40, _), _) if true => 40,
(_, (41, _), _) if true => 41,
(_, (42, _), _) if true => 42,
(_, (43, _), _) if true => 43,
(_, (44, _), _) if true => 44,
_ => {
return Err(___lalrpop_util::ParseError::UnrecognizedToken {
token: Some(___lookahead),
expected: vec![],
});
}
};
loop {
let ___state = *___states.last().unwrap() as usize;
let ___action = ___ACTION[___state * 45 + ___integer];
if ___action > 0 {
let ___symbol = match ___integer {
0 => match ___lookahead.1 {
(0, ___tok0) => ___Symbol::Term_22_28_22(___tok0),
_ => unreachable!(),
},
1 => match ___lookahead.1 {
(1, ___tok0) => ___Symbol::Term_22_29_22(___tok0),
_ => unreachable!(),
},
2 => match ___lookahead.1 {
(2, ___tok0) => ___Symbol::Term_22_2c_22(___tok0),
_ => unreachable!(),
},
3 => match ___lookahead.1 {
(3, ___tok0) => ___Symbol::Term_22_3a_22(___tok0),
_ => unreachable!(),
},
4 => match ___lookahead.1 {
(4, ___tok0) => ___Symbol::Term_22_3a_3a_22(___tok0),
_ => unreachable!(),
},
5 => match ___lookahead.1 {
(5, ___tok0) => ___Symbol::Term_22_3b_22(___tok0),
_ => unreachable!(),
},
6 => match ___lookahead.1 {
(6, ___tok0) => ___Symbol::Term_22_3c_22(___tok0),
_ => unreachable!(),
},
7 => match ___lookahead.1 {
(7, ___tok0) => ___Symbol::Term_22_3e_22(___tok0),
_ => unreachable!(),
},
8 => match ___lookahead.1 {
(8, ___tok0) => ___Symbol::Term_22_5b_22(___tok0),
_ => unreachable!(),
},
9 => match ___lookahead.1 {
(9, ___tok0) => ___Symbol::Term_22_5d_22(___tok0),
_ => unreachable!(),
},
10 => match ___lookahead.1 {
(10, ___tok0) => ___Symbol::Term_22____delete_____22(___tok0),
_ => unreachable!(),
},
11 => match ___lookahead.1 {
(11, ___tok0) => ___Symbol::Term_22async_22(___tok0),
_ => unreachable!(),
},
12 => match ___lookahead.1 {
(12, ___tok0) => ___Symbol::Term_22both_22(___tok0),
_ => unreachable!(),
},
13 => match ___lookahead.1 {
(13, ___tok0) => ___Symbol::Term_22child_22(___tok0),
_ => unreachable!(),
},
14 => match ___lookahead.1 {
(14, ___tok0) => ___Symbol::Term_22class_22(___tok0),
_ => unreachable!(),
},
15 => match ___lookahead.1 {
(15, ___tok0) => ___Symbol::Term_22compress_22(___tok0),
_ => unreachable!(),
},
16 => match ___lookahead.1 {
(16, ___tok0) => ___Symbol::Term_22compressall_22(___tok0),
_ => unreachable!(),
},
17 => match ___lookahead.1 {
(17, ___tok0) => ___Symbol::Term_22from_22(___tok0),
_ => unreachable!(),
},
18 => match ___lookahead.1 {
(18, ___tok0) => ___Symbol::Term_22high_22(___tok0),
_ => unreachable!(),
},
19 => match ___lookahead.1 {
(19, ___tok0) => ___Symbol::Term_22include_22(___tok0),
_ => unreachable!(),
},
20 => match ___lookahead.1 {
(20, ___tok0) => ___Symbol::Term_22inside__cpow_22(___tok0),
_ => unreachable!(),
},
21 => match ___lookahead.1 {
(21, ___tok0) => ___Symbol::Term_22inside__sync_22(___tok0),
_ => unreachable!(),
},
22 => match ___lookahead.1 {
(22, ___tok0) => ___Symbol::Term_22intr_22(___tok0),
_ => unreachable!(),
},
23 => match ___lookahead.1 {
(23, ___tok0) => ___Symbol::Term_22manager_22(___tok0),
_ => unreachable!(),
},
24 => match ___lookahead.1 {
(24, ___tok0) => ___Symbol::Term_22manages_22(___tok0),
_ => unreachable!(),
},
25 => match ___lookahead.1 {
(25, ___tok0) => ___Symbol::Term_22namespace_22(___tok0),
_ => unreachable!(),
},
26 => match ___lookahead.1 {
(26, ___tok0) => ___Symbol::Term_22nested_22(___tok0),
_ => unreachable!(),
},
27 => match ___lookahead.1 {
(27, ___tok0) => ___Symbol::Term_22normal_22(___tok0),
_ => unreachable!(),
},
28 => match ___lookahead.1 {
(28, ___tok0) => ___Symbol::Term_22not_22(___tok0),
_ => unreachable!(),
},
29 => match ___lookahead.1 {
(29, ___tok0) => ___Symbol::Term_22nullable_22(___tok0),
_ => unreachable!(),
},
30 => match ___lookahead.1 {
(30, ___tok0) => ___Symbol::Term_22or_22(___tok0),
_ => unreachable!(),
},
31 => match ___lookahead.1 {
(31, ___tok0) => ___Symbol::Term_22parent_22(___tok0),
_ => unreachable!(),
},
32 => match ___lookahead.1 {
(32, ___tok0) => ___Symbol::Term_22prio_22(___tok0),
_ => unreachable!(),
},
33 => match ___lookahead.1 {
(33, ___tok0) => ___Symbol::Term_22protocol_22(___tok0),
_ => unreachable!(),
},
34 => match ___lookahead.1 {
(34, ___tok0) => ___Symbol::Term_22returns_22(___tok0),
_ => unreachable!(),
},
35 => match ___lookahead.1 {
(35, ___tok0) => ___Symbol::Term_22struct_22(___tok0),
_ => unreachable!(),
},
36 => match ___lookahead.1 {
(36, ___tok0) => ___Symbol::Term_22sync_22(___tok0),
_ => unreachable!(),
},
37 => match ___lookahead.1 {
(37, ___tok0) => ___Symbol::Term_22union_22(___tok0),
_ => unreachable!(),
},
38 => match ___lookahead.1 {
(38, ___tok0) => ___Symbol::Term_22upto_22(___tok0),
_ => unreachable!(),
},
39 => match ___lookahead.1 {
(39, ___tok0) => ___Symbol::Term_22using_22(___tok0),
_ => unreachable!(),
},
40 => match ___lookahead.1 {
(40, ___tok0) => ___Symbol::Term_22verify_22(___tok0),
_ => unreachable!(),
},
41 => match ___lookahead.1 {
(41, ___tok0) => ___Symbol::Term_22_7b_22(___tok0),
_ => unreachable!(),
},
42 => match ___lookahead.1 {
(42, ___tok0) => ___Symbol::Term_22_7d_22(___tok0),
_ => unreachable!(),
},
43 => match ___lookahead.1 {
(43, ___tok0) => ___Symbol::Termr_23_22_5c_22_5b_5e_5c_22_5c_5cn_5d_2a_5c_22_22_23(___tok0),
_ => unreachable!(),
},
44 => match ___lookahead.1 {
(44, ___tok0) => ___Symbol::Termr_23_22_5ba_2dzA_2dZ___5d_5ba_2dzA_2dZ0_2d9___5d_2a_22_23(___tok0),
_ => unreachable!(),
},
_ => unreachable!(),
};
___states.push(___action - 1);
___symbols.push((___lookahead.0, ___symbol, ___lookahead.2));
continue '___shift;
} else if ___action < 0 {
if let Some(r) = ___reduce(parser_state, input, ___action, Some(&___lookahead.0), &mut ___states, &mut ___symbols, ::std::marker::PhantomData::<()>) {
return r;
}
} else {
return Err(___lalrpop_util::ParseError::UnrecognizedToken {
token: Some(___lookahead),
expected: vec![],
});
}
}
}
loop {
let ___state = *___states.last().unwrap() as usize;
let ___action = ___EOF_ACTION[___state];
if ___action < 0 {
if let Some(r) = ___reduce(parser_state, input, ___action, None, &mut ___states, &mut ___symbols, ::std::marker::PhantomData::<()>) {
return r;
}
} else {
return Err(___lalrpop_util::ParseError::UnrecognizedToken {
token: None,
expected: vec![],
});
}
}
}
pub fn ___reduce<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___action: i32,
___lookahead_start: Option<&usize>,
___states: &mut ::std::vec::Vec<i32>,
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<()>,
) -> Option<Result<TranslationUnit,___lalrpop_util::ParseError<usize,(usize, &'input str),()>>>
{
let ___nonterminal = match -___action {
1 => {
let ___sym0 = ___pop_Term_22nullable_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action75::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::Nt_22nullable_22_3f(___nt), ___end));
0
}
2 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action76::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::Nt_22nullable_22_3f(___nt), ___end));
0
}
3 => {
let ___sym1 = ___pop_Term_22_5d_22(___symbols);
let ___sym0 = ___pop_Term_22_5b_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action74::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::Nt_28_22_5b_22_20_22_5d_22_29(___nt), ___end));
1
}
4 => {
let ___sym1 = ___pop_Term_22_5d_22(___symbols);
let ___sym0 = ___pop_Term_22_5b_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action106::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::Nt_28_22_5b_22_20_22_5d_22_29_3f(___nt), ___end));
2
}
5 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action73::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::Nt_28_22_5b_22_20_22_5d_22_29_3f(___nt), ___end));
2
}
6 => {
let ___sym1 = ___pop_Term_22_3b_22(___symbols);
let ___sym0 = ___pop_NtPreambleStmt(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action93::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::Nt_28PreambleStmt_20_22_3b_22_29(___nt), ___end));
3
}
7 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action91::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::Nt_28PreambleStmt_20_22_3b_22_29_2a(___nt), ___end));
4
}
8 => {
let ___sym0 = ___pop_Nt_28PreambleStmt_20_22_3b_22_29_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action92::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::Nt_28PreambleStmt_20_22_3b_22_29_2a(___nt), ___end));
4
}
9 => {
let ___sym1 = ___pop_Term_22_3b_22(___symbols);
let ___sym0 = ___pop_NtPreambleStmt(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action109::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::Nt_28PreambleStmt_20_22_3b_22_29_2b(___nt), ___end));
5
}
10 => {
let ___sym2 = ___pop_Term_22_3b_22(___symbols);
let ___sym1 = ___pop_NtPreambleStmt(___symbols);
let ___sym0 = ___pop_Nt_28PreambleStmt_20_22_3b_22_29_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action110::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::Nt_28PreambleStmt_20_22_3b_22_29_2b(___nt), ___end));
5
}
11 => {
let ___sym1 = ___pop_Term_22_3b_22(___symbols);
let ___sym0 = ___pop_NtStructField(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action90::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::Nt_28StructField_20_22_3b_22_29(___nt), ___end));
6
}
12 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action88::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::Nt_28StructField_20_22_3b_22_29_2a(___nt), ___end));
7
}
13 => {
let ___sym0 = ___pop_Nt_28StructField_20_22_3b_22_29_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action89::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::Nt_28StructField_20_22_3b_22_29_2a(___nt), ___end));
7
}
14 => {
let ___sym1 = ___pop_Term_22_3b_22(___symbols);
let ___sym0 = ___pop_NtStructField(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action113::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::Nt_28StructField_20_22_3b_22_29_2b(___nt), ___end));
8
}
15 => {
let ___sym2 = ___pop_Term_22_3b_22(___symbols);
let ___sym1 = ___pop_NtStructField(___symbols);
let ___sym0 = ___pop_Nt_28StructField_20_22_3b_22_29_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action114::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::Nt_28StructField_20_22_3b_22_29_2b(___nt), ___end));
8
}
16 => {
let ___sym1 = ___pop_Term_22_3b_22(___symbols);
let ___sym0 = ___pop_NtType(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action87::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::Nt_28Type_20_22_3b_22_29(___nt), ___end));
9
}
17 => {
let ___sym1 = ___pop_Term_22_3b_22(___symbols);
let ___sym0 = ___pop_NtType(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action117::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::Nt_28Type_20_22_3b_22_29_2b(___nt), ___end));
10
}
18 => {
let ___sym2 = ___pop_Term_22_3b_22(___symbols);
let ___sym1 = ___pop_NtType(___symbols);
let ___sym0 = ___pop_Nt_28Type_20_22_3b_22_29_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action118::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::Nt_28Type_20_22_3b_22_29_2b(___nt), ___end));
10
}
19 => {
let ___sym2 = ___pop_Term_22_5d_22(___symbols);
let ___sym1 = ___pop_Term_22_5b_22(___symbols);
let ___sym0 = ___pop_NtCxxID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action107::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::NtBasicType(___nt), ___end));
11
}
20 => {
let ___sym0 = ___pop_NtCxxID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action108::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtBasicType(___nt), ___end));
11
}
21 => {
let ___sym0 = ___pop_NtID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action69::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtCxxID(___nt), ___end));
12
}
22 => {
let ___sym0 = ___pop_NtCxxTemplateInst(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action70::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtCxxID(___nt), ___end));
12
}
23 => {
let ___sym1 = ___pop_NtSTRING(___symbols);
let ___sym0 = ___pop_Term_22include_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action8::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtCxxIncludeStmt(___nt), ___end));
13
}
24 => {
let ___sym3 = ___pop_Term_22_3e_22(___symbols);
let ___sym2 = ___pop_NtID(___symbols);
let ___sym1 = ___pop_Term_22_3c_22(___symbols);
let ___sym0 = ___pop_NtID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action71::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3);
let ___states_len = ___states.len();
___states.truncate(___states_len - 4);
___symbols.push((___start, ___Symbol::NtCxxTemplateInst(___nt), ___end));
14
}
25 => {
let ___sym0 = ___pop_NtQualifiedID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action65::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtCxxType(___nt), ___end));
15
}
26 => {
let ___sym0 = ___pop_NtCxxID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action66::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtCxxType(___nt), ___end));
15
}
27 => {
let ___sym0 = ___pop_Term_22class_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action13::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtCxxTypeKind(___nt), ___end));
16
}
28 => {
let ___sym0 = ___pop_Term_22struct_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action14::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtCxxTypeKind(___nt), ___end));
16
}
29 => {
let ___sym0 = ___pop_Termr_23_22_5ba_2dzA_2dZ___5d_5ba_2dzA_2dZ0_2d9___5d_2a_22_23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action1::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtID(___nt), ___end));
17
}
30 => {
let ___sym2 = ___pop_NtID(___symbols);
let ___sym1 = ___pop_Term_22protocol_22(___symbols);
let ___sym0 = ___pop_Term_22include_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action9::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::NtIncludeStmt(___nt), ___end));
18
}
31 => {
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22include_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action10::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtIncludeStmt(___nt), ___end));
18
}
32 => {
let ___sym0 = ___pop_NtID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action25::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtManagerList(___nt), ___end));
19
}
33 => {
let ___sym2 = ___pop_NtID(___symbols);
let ___sym1 = ___pop_Term_22or_22(___symbols);
let ___sym0 = ___pop_NtManagerList(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action26::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::NtManagerList(___nt), ___end));
19
}
34 => {
let ___sym2 = ___pop_Term_22_3b_22(___symbols);
let ___sym1 = ___pop_NtManagerList(___symbols);
let ___sym0 = ___pop_Term_22manager_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action23::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::NtManagersStmtOpt(___nt), ___end));
20
}
35 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action24::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtManagersStmtOpt(___nt), ___end));
20
}
36 => {
let ___sym2 = ___pop_Term_22_3b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22manages_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action27::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::NtManagesStmt(___nt), ___end));
21
}
37 => {
let ___sym0 = ___pop_NtManagesStmt(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action81::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtManagesStmt_3f(___nt), ___end));
22
}
38 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action82::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtManagesStmt_3f(___nt), ___end));
22
}
39 => {
let ___sym4 = ___pop_NtMessageOutParams(___symbols);
let ___sym3 = ___pop_Term_22_29_22(___symbols);
let ___sym2 = ___pop_NtParamList(___symbols);
let ___sym1 = ___pop_Term_22_28_22(___symbols);
let ___sym0 = ___pop_NtMessageId(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action125::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
let ___states_len = ___states.len();
___states.truncate(___states_len - 5);
___symbols.push((___start, ___Symbol::NtMessageBody(___nt), ___end));
23
}
40 => {
let ___sym5 = ___pop_NtMessageModifier_2b(___symbols);
let ___sym4 = ___pop_NtMessageOutParams(___symbols);
let ___sym3 = ___pop_Term_22_29_22(___symbols);
let ___sym2 = ___pop_NtParamList(___symbols);
let ___sym1 = ___pop_Term_22_28_22(___symbols);
let ___sym0 = ___pop_NtMessageId(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action126::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
let ___states_len = ___states.len();
___states.truncate(___states_len - 6);
___symbols.push((___start, ___Symbol::NtMessageBody(___nt), ___end));
23
}
41 => {
let ___sym1 = ___pop_NtMessageBody(___symbols);
let ___sym0 = ___pop_NtSendSemanticsQual(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action33::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtMessageDecl(___nt), ___end));
24
}
42 => {
let ___sym3 = ___pop_Term_22_3b_22(___symbols);
let ___sym2 = ___pop_NtMessageDecl(___symbols);
let ___sym1 = ___pop_Term_22_3a_22(___symbols);
let ___sym0 = ___pop_NtMessageDirectionLabel(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action28::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3);
let ___states_len = ___states.len();
___states.truncate(___states_len - 4);
___symbols.push((___start, ___Symbol::NtMessageDeclThing(___nt), ___end));
25
}
43 => {
let ___sym1 = ___pop_Term_22_3b_22(___symbols);
let ___sym0 = ___pop_NtMessageDecl(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action29::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtMessageDeclThing(___nt), ___end));
25
}
44 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action79::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtMessageDeclThing_2a(___nt), ___end));
26
}
45 => {
let ___sym0 = ___pop_NtMessageDeclThing_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action80::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageDeclThing_2a(___nt), ___end));
26
}
46 => {
let ___sym0 = ___pop_NtMessageDeclThing(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action100::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageDeclThing_2b(___nt), ___end));
27
}
47 => {
let ___sym1 = ___pop_NtMessageDeclThing(___symbols);
let ___sym0 = ___pop_NtMessageDeclThing_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action101::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtMessageDeclThing_2b(___nt), ___end));
27
}
48 => {
let ___sym0 = ___pop_Term_22parent_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action30::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageDirectionLabel(___nt), ___end));
28
}
49 => {
let ___sym0 = ___pop_Term_22child_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action31::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageDirectionLabel(___nt), ___end));
28
}
50 => {
let ___sym0 = ___pop_Term_22both_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action32::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageDirectionLabel(___nt), ___end));
28
}
51 => {
let ___sym0 = ___pop_NtID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action35::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageId(___nt), ___end));
29
}
52 => {
let ___sym0 = ___pop_Term_22____delete_____22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action36::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageId(___nt), ___end));
29
}
53 => {
let ___sym0 = ___pop_Term_22verify_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action39::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageModifier(___nt), ___end));
30
}
54 => {
let ___sym0 = ___pop_Term_22compress_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action40::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageModifier(___nt), ___end));
30
}
55 => {
let ___sym0 = ___pop_Term_22compressall_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action41::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageModifier(___nt), ___end));
30
}
56 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action77::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtMessageModifier_2a(___nt), ___end));
31
}
57 => {
let ___sym0 = ___pop_NtMessageModifier_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action78::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageModifier_2a(___nt), ___end));
31
}
58 => {
let ___sym0 = ___pop_NtMessageModifier(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action102::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtMessageModifier_2b(___nt), ___end));
32
}
59 => {
let ___sym1 = ___pop_NtMessageModifier(___symbols);
let ___sym0 = ___pop_NtMessageModifier_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action103::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtMessageModifier_2b(___nt), ___end));
32
}
60 => {
let ___sym3 = ___pop_Term_22_29_22(___symbols);
let ___sym2 = ___pop_NtParamList(___symbols);
let ___sym1 = ___pop_Term_22_28_22(___symbols);
let ___sym0 = ___pop_Term_22returns_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action37::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3);
let ___states_len = ___states.len();
___states.truncate(___states_len - 4);
___symbols.push((___start, ___Symbol::NtMessageOutParams(___nt), ___end));
33
}
61 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action38::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtMessageOutParams(___nt), ___end));
33
}
62 => {
let ___sym4 = ___pop_Term_22_7d_22(___symbols);
let ___sym3 = ___pop_NtNamespaceThing_2b(___symbols);
let ___sym2 = ___pop_Term_22_7b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22namespace_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action15::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
let ___states_len = ___states.len();
___states.truncate(___states_len - 5);
___symbols.push((___start, ___Symbol::NtNamespaceThing(___nt), ___end));
34
}
63 => {
let ___sym0 = ___pop_NtStructDecl(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action16::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtNamespaceThing(___nt), ___end));
34
}
64 => {
let ___sym0 = ___pop_NtUnionDecl(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action17::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtNamespaceThing(___nt), ___end));
34
}
65 => {
let ___sym0 = ___pop_NtProtocolDefn(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action18::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtNamespaceThing(___nt), ___end));
34
}
66 => {
let ___sym0 = ___pop_NtNamespaceThing(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action94::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtNamespaceThing_2b(___nt), ___end));
35
}
67 => {
let ___sym1 = ___pop_NtNamespaceThing(___symbols);
let ___sym0 = ___pop_NtNamespaceThing_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action95::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtNamespaceThing_2b(___nt), ___end));
35
}
68 => {
let ___sym0 = ___pop_Term_22not_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action42::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtNesting(___nt), ___end));
36
}
69 => {
let ___sym0 = ___pop_Term_22inside__sync_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action43::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtNesting(___nt), ___end));
36
}
70 => {
let ___sym0 = ___pop_Term_22inside__cpow_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action44::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtNesting(___nt), ___end));
36
}
71 => {
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_NtType(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action62::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtParam(___nt), ___end));
37
}
72 => {
let ___sym2 = ___pop_NtParam(___symbols);
let ___sym1 = ___pop_Term_22_2c_22(___symbols);
let ___sym0 = ___pop_NtParamList(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action59::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::NtParamList(___nt), ___end));
38
}
73 => {
let ___sym0 = ___pop_NtParam(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action60::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtParamList(___nt), ___end));
38
}
74 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action61::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtParamList(___nt), ___end));
38
}
75 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action111::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtPreamble(___nt), ___end));
39
}
76 => {
let ___sym0 = ___pop_Nt_28PreambleStmt_20_22_3b_22_29_2b(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action112::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtPreamble(___nt), ___end));
39
}
77 => {
let ___sym0 = ___pop_NtCxxIncludeStmt(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action5::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtPreambleStmt(___nt), ___end));
40
}
78 => {
let ___sym0 = ___pop_NtIncludeStmt(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action6::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtPreambleStmt(___nt), ___end));
40
}
79 => {
let ___sym0 = ___pop_NtUsingStmt(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action7::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtPreambleStmt(___nt), ___end));
40
}
80 => {
let ___sym0 = ___pop_Term_22normal_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action45::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtPriority(___nt), ___end));
41
}
81 => {
let ___sym0 = ___pop_Term_22high_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action46::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtPriority(___nt), ___end));
41
}
82 => {
let ___sym7 = ___pop_Term_22_3b_22(___symbols);
let ___sym6 = ___pop_Term_22_7d_22(___symbols);
let ___sym5 = ___pop_NtManagesStmt(___symbols);
let ___sym4 = ___pop_NtManagersStmtOpt(___symbols);
let ___sym3 = ___pop_Term_22_7b_22(___symbols);
let ___sym2 = ___pop_NtID(___symbols);
let ___sym1 = ___pop_Term_22protocol_22(___symbols);
let ___sym0 = ___pop_NtProtocolSendSemanticsQual(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action127::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
let ___states_len = ___states.len();
___states.truncate(___states_len - 8);
___symbols.push((___start, ___Symbol::NtProtocolDefn(___nt), ___end));
42
}
83 => {
let ___sym6 = ___pop_Term_22_3b_22(___symbols);
let ___sym5 = ___pop_Term_22_7d_22(___symbols);
let ___sym4 = ___pop_NtManagesStmt(___symbols);
let ___sym3 = ___pop_NtManagersStmtOpt(___symbols);
let ___sym2 = ___pop_Term_22_7b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22protocol_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action128::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
let ___states_len = ___states.len();
___states.truncate(___states_len - 7);
___symbols.push((___start, ___Symbol::NtProtocolDefn(___nt), ___end));
42
}
84 => {
let ___sym8 = ___pop_Term_22_3b_22(___symbols);
let ___sym7 = ___pop_Term_22_7d_22(___symbols);
let ___sym6 = ___pop_NtMessageDeclThing_2b(___symbols);
let ___sym5 = ___pop_NtManagesStmt(___symbols);
let ___sym4 = ___pop_NtManagersStmtOpt(___symbols);
let ___sym3 = ___pop_Term_22_7b_22(___symbols);
let ___sym2 = ___pop_NtID(___symbols);
let ___sym1 = ___pop_Term_22protocol_22(___symbols);
let ___sym0 = ___pop_NtProtocolSendSemanticsQual(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym8.2.clone();
let ___nt = super::___action129::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8);
let ___states_len = ___states.len();
___states.truncate(___states_len - 9);
___symbols.push((___start, ___Symbol::NtProtocolDefn(___nt), ___end));
42
}
85 => {
let ___sym7 = ___pop_Term_22_3b_22(___symbols);
let ___sym6 = ___pop_Term_22_7d_22(___symbols);
let ___sym5 = ___pop_NtMessageDeclThing_2b(___symbols);
let ___sym4 = ___pop_NtManagesStmt(___symbols);
let ___sym3 = ___pop_NtManagersStmtOpt(___symbols);
let ___sym2 = ___pop_Term_22_7b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22protocol_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action130::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
let ___states_len = ___states.len();
___states.truncate(___states_len - 8);
___symbols.push((___start, ___Symbol::NtProtocolDefn(___nt), ___end));
42
}
86 => {
let ___sym6 = ___pop_Term_22_3b_22(___symbols);
let ___sym5 = ___pop_Term_22_7d_22(___symbols);
let ___sym4 = ___pop_NtManagersStmtOpt(___symbols);
let ___sym3 = ___pop_Term_22_7b_22(___symbols);
let ___sym2 = ___pop_NtID(___symbols);
let ___sym1 = ___pop_Term_22protocol_22(___symbols);
let ___sym0 = ___pop_NtProtocolSendSemanticsQual(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action131::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
let ___states_len = ___states.len();
___states.truncate(___states_len - 7);
___symbols.push((___start, ___Symbol::NtProtocolDefn(___nt), ___end));
42
}
87 => {
let ___sym5 = ___pop_Term_22_3b_22(___symbols);
let ___sym4 = ___pop_Term_22_7d_22(___symbols);
let ___sym3 = ___pop_NtManagersStmtOpt(___symbols);
let ___sym2 = ___pop_Term_22_7b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22protocol_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action132::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
let ___states_len = ___states.len();
___states.truncate(___states_len - 6);
___symbols.push((___start, ___Symbol::NtProtocolDefn(___nt), ___end));
42
}
88 => {
let ___sym7 = ___pop_Term_22_3b_22(___symbols);
let ___sym6 = ___pop_Term_22_7d_22(___symbols);
let ___sym5 = ___pop_NtMessageDeclThing_2b(___symbols);
let ___sym4 = ___pop_NtManagersStmtOpt(___symbols);
let ___sym3 = ___pop_Term_22_7b_22(___symbols);
let ___sym2 = ___pop_NtID(___symbols);
let ___sym1 = ___pop_Term_22protocol_22(___symbols);
let ___sym0 = ___pop_NtProtocolSendSemanticsQual(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action133::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
let ___states_len = ___states.len();
___states.truncate(___states_len - 8);
___symbols.push((___start, ___Symbol::NtProtocolDefn(___nt), ___end));
42
}
89 => {
let ___sym6 = ___pop_Term_22_3b_22(___symbols);
let ___sym5 = ___pop_Term_22_7d_22(___symbols);
let ___sym4 = ___pop_NtMessageDeclThing_2b(___symbols);
let ___sym3 = ___pop_NtManagersStmtOpt(___symbols);
let ___sym2 = ___pop_Term_22_7b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22protocol_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action134::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
let ___states_len = ___states.len();
___states.truncate(___states_len - 7);
___symbols.push((___start, ___Symbol::NtProtocolDefn(___nt), ___end));
42
}
90 => {
let ___sym0 = ___pop_Term_22async_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action54::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtProtocolSendSemanticsQual(___nt), ___end));
43
}
91 => {
let ___sym0 = ___pop_Term_22sync_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action55::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtProtocolSendSemanticsQual(___nt), ___end));
43
}
92 => {
let ___sym5 = ___pop_Term_22async_22(___symbols);
let ___sym4 = ___pop_Term_22_29_22(___symbols);
let ___sym3 = ___pop_NtNesting(___symbols);
let ___sym2 = ___pop_Term_22upto_22(___symbols);
let ___sym1 = ___pop_Term_22_28_22(___symbols);
let ___sym0 = ___pop_Term_22nested_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action56::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
let ___states_len = ___states.len();
___states.truncate(___states_len - 6);
___symbols.push((___start, ___Symbol::NtProtocolSendSemanticsQual(___nt), ___end));
43
}
93 => {
let ___sym5 = ___pop_Term_22sync_22(___symbols);
let ___sym4 = ___pop_Term_22_29_22(___symbols);
let ___sym3 = ___pop_NtNesting(___symbols);
let ___sym2 = ___pop_Term_22upto_22(___symbols);
let ___sym1 = ___pop_Term_22_28_22(___symbols);
let ___sym0 = ___pop_Term_22nested_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action57::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
let ___states_len = ___states.len();
___states.truncate(___states_len - 6);
___symbols.push((___start, ___Symbol::NtProtocolSendSemanticsQual(___nt), ___end));
43
}
94 => {
let ___sym0 = ___pop_Term_22intr_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action58::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtProtocolSendSemanticsQual(___nt), ___end));
43
}
95 => {
let ___sym0 = ___pop_NtProtocolSendSemanticsQual(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action83::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtProtocolSendSemanticsQual_3f(___nt), ___end));
44
}
96 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action84::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtProtocolSendSemanticsQual_3f(___nt), ___end));
44
}
97 => {
let ___sym2 = ___pop_NtCxxID(___symbols);
let ___sym1 = ___pop_Term_22_3a_3a_22(___symbols);
let ___sym0 = ___pop_NtQualifiedID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action67::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::NtQualifiedID(___nt), ___end));
45
}
98 => {
let ___sym2 = ___pop_NtCxxID(___symbols);
let ___sym1 = ___pop_Term_22_3a_3a_22(___symbols);
let ___sym0 = ___pop_NtCxxID(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action68::<>(parser_state, input, ___sym0, ___sym1, ___sym2);
let ___states_len = ___states.len();
___states.truncate(___states_len - 3);
___symbols.push((___start, ___Symbol::NtQualifiedID(___nt), ___end));
45
}
99 => {
let ___sym0 = ___pop_Termr_23_22_5c_22_5b_5e_5c_22_5c_5cn_5d_2a_5c_22_22_23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action2::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtSTRING(___nt), ___end));
46
}
100 => {
let ___sym3 = ___pop_Term_22_29_22(___symbols);
let ___sym2 = ___pop_NtNesting(___symbols);
let ___sym1 = ___pop_Term_22_28_22(___symbols);
let ___sym0 = ___pop_Term_22nested_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action47::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3);
let ___states_len = ___states.len();
___states.truncate(___states_len - 4);
___symbols.push((___start, ___Symbol::NtSendQualifier(___nt), ___end));
47
}
101 => {
let ___sym3 = ___pop_Term_22_29_22(___symbols);
let ___sym2 = ___pop_NtPriority(___symbols);
let ___sym1 = ___pop_Term_22_28_22(___symbols);
let ___sym0 = ___pop_Term_22prio_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action48::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3);
let ___states_len = ___states.len();
___states.truncate(___states_len - 4);
___symbols.push((___start, ___Symbol::NtSendQualifier(___nt), ___end));
47
}
102 => {
let ___sym1 = ___pop_NtSendQualifierList(___symbols);
let ___sym0 = ___pop_NtSendQualifier(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action49::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtSendQualifierList(___nt), ___end));
48
}
103 => {
let ___start = ___symbols.last().map(|s| s.2.clone()).unwrap_or_default();
let ___end = ___lookahead_start.cloned().unwrap_or_else(|| ___start.clone());
let ___nt = super::___action50::<>(parser_state, input, &___start, &___end);
let ___states_len = ___states.len();
___states.truncate(___states_len - 0);
___symbols.push((___start, ___Symbol::NtSendQualifierList(___nt), ___end));
48
}
104 => {
let ___sym1 = ___pop_Term_22async_22(___symbols);
let ___sym0 = ___pop_NtSendQualifierList(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action51::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtSendSemanticsQual(___nt), ___end));
49
}
105 => {
let ___sym1 = ___pop_Term_22sync_22(___symbols);
let ___sym0 = ___pop_NtSendQualifierList(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action52::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtSendSemanticsQual(___nt), ___end));
49
}
106 => {
let ___sym0 = ___pop_Term_22intr_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action53::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtSendSemanticsQual(___nt), ___end));
49
}
107 => {
let ___sym4 = ___pop_Term_22_3b_22(___symbols);
let ___sym3 = ___pop_Term_22_7d_22(___symbols);
let ___sym2 = ___pop_Term_22_7b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22struct_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action115::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
let ___states_len = ___states.len();
___states.truncate(___states_len - 5);
___symbols.push((___start, ___Symbol::NtStructDecl(___nt), ___end));
50
}
108 => {
let ___sym5 = ___pop_Term_22_3b_22(___symbols);
let ___sym4 = ___pop_Term_22_7d_22(___symbols);
let ___sym3 = ___pop_Nt_28StructField_20_22_3b_22_29_2b(___symbols);
let ___sym2 = ___pop_Term_22_7b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22struct_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action116::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
let ___states_len = ___states.len();
___states.truncate(___states_len - 6);
___symbols.push((___start, ___Symbol::NtStructDecl(___nt), ___end));
50
}
109 => {
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_NtType(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action20::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtStructField(___nt), ___end));
51
}
110 => {
let ___sym1 = ___pop_NtNamespaceThing_2b(___symbols);
let ___sym0 = ___pop_NtPreamble(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action3::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtTranslationUnit(___nt), ___end));
52
}
111 => {
let ___sym1 = ___pop_NtBasicType(___symbols);
let ___sym0 = ___pop_Term_22nullable_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action104::<>(parser_state, input, ___sym0, ___sym1);
let ___states_len = ___states.len();
___states.truncate(___states_len - 2);
___symbols.push((___start, ___Symbol::NtType(___nt), ___end));
53
}
112 => {
let ___sym0 = ___pop_NtBasicType(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action105::<>(parser_state, input, ___sym0);
let ___states_len = ___states.len();
___states.truncate(___states_len - 1);
___symbols.push((___start, ___Symbol::NtType(___nt), ___end));
53
}
113 => {
let ___sym5 = ___pop_Term_22_3b_22(___symbols);
let ___sym4 = ___pop_Term_22_7d_22(___symbols);
let ___sym3 = ___pop_Nt_28Type_20_22_3b_22_29_2b(___symbols);
let ___sym2 = ___pop_Term_22_7b_22(___symbols);
let ___sym1 = ___pop_NtID(___symbols);
let ___sym0 = ___pop_Term_22union_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action21::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
let ___states_len = ___states.len();
___states.truncate(___states_len - 6);
___symbols.push((___start, ___Symbol::NtUnionDecl(___nt), ___end));
54
}
114 => {
let ___sym3 = ___pop_NtSTRING(___symbols);
let ___sym2 = ___pop_Term_22from_22(___symbols);
let ___sym1 = ___pop_NtCxxType(___symbols);
let ___sym0 = ___pop_Term_22using_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action11::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3);
let ___states_len = ___states.len();
___states.truncate(___states_len - 4);
___symbols.push((___start, ___Symbol::NtUsingStmt(___nt), ___end));
55
}
115 => {
let ___sym4 = ___pop_NtSTRING(___symbols);
let ___sym3 = ___pop_Term_22from_22(___symbols);
let ___sym2 = ___pop_NtCxxType(___symbols);
let ___sym1 = ___pop_NtCxxTypeKind(___symbols);
let ___sym0 = ___pop_Term_22using_22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action12::<>(parser_state, input, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
let ___states_len = ___states.len();
___states.truncate(___states_len - 5);
___symbols.push((___start, ___Symbol::NtUsingStmt(___nt), ___end));
55
}
116 => {
let ___sym0 = ___pop_NtTranslationUnit(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action0::<>(parser_state, input, ___sym0);
return Some(Ok(___nt));
}
_ => panic!("invalid action code {}", ___action)
};
let ___state = *___states.last().unwrap() as usize;
let ___next_state = ___GOTO[___state * 57 + ___nonterminal] - 1;
___states.push(___next_state);
None
}
fn ___pop_Term_22_28_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_28_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_29_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_29_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_2c_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_2c_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_3a_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_3a_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_3a_3a_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_3a_3a_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_3b_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_3b_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_3c_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_3c_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_3e_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_3e_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_5b_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_5b_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_5d_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_5d_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22____delete_____22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22____delete_____22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22async_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22async_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22both_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22both_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22child_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22child_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22class_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22class_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22compress_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22compress_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22compressall_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22compressall_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22from_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22from_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22high_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22high_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22include_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22include_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22inside__cpow_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22inside__cpow_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22inside__sync_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22inside__sync_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22intr_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22intr_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22manager_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22manager_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22manages_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22manages_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22namespace_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22namespace_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22nested_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22nested_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22normal_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22normal_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22not_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22not_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22nullable_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22nullable_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22or_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22or_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22parent_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22parent_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22prio_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22prio_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22protocol_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22protocol_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22returns_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22returns_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22struct_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22struct_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22sync_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22sync_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22union_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22union_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22upto_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22upto_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22using_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22using_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22verify_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22verify_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_7b_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_7b_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Term_22_7d_22<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Term_22_7d_22(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Termr_23_22_5c_22_5b_5e_5c_22_5c_5cn_5d_2a_5c_22_22_23<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Termr_23_22_5c_22_5b_5e_5c_22_5c_5cn_5d_2a_5c_22_22_23(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Termr_23_22_5ba_2dzA_2dZ___5d_5ba_2dzA_2dZ0_2d9___5d_2a_22_23<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Termr_23_22_5ba_2dzA_2dZ___5d_5ba_2dzA_2dZ0_2d9___5d_2a_22_23(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_22nullable_22_3f<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<&'input str>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_22nullable_22_3f(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28_22_5b_22_20_22_5d_22_29<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (&'input str, &'input str), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28_22_5b_22_20_22_5d_22_29(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28_22_5b_22_20_22_5d_22_29_3f<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<(&'input str, &'input str)>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28_22_5b_22_20_22_5d_22_29_3f(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28PreambleStmt_20_22_3b_22_29<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (PreambleStmt, &'input str), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28PreambleStmt_20_22_3b_22_29(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28PreambleStmt_20_22_3b_22_29_2a<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<(PreambleStmt, &'input str)>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28PreambleStmt_20_22_3b_22_29_2a(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28PreambleStmt_20_22_3b_22_29_2b<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<(PreambleStmt, &'input str)>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28PreambleStmt_20_22_3b_22_29_2b(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28StructField_20_22_3b_22_29<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (StructField, &'input str), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28StructField_20_22_3b_22_29(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28StructField_20_22_3b_22_29_2a<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<(StructField, &'input str)>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28StructField_20_22_3b_22_29_2a(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28StructField_20_22_3b_22_29_2b<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<(StructField, &'input str)>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28StructField_20_22_3b_22_29_2b(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28Type_20_22_3b_22_29<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (TypeSpec, &'input str), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28Type_20_22_3b_22_29(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt_28Type_20_22_3b_22_29_2b<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<(TypeSpec, &'input str)>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt_28Type_20_22_3b_22_29_2b(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtBasicType<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeSpec, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtBasicType(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtCxxID<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, String, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtCxxID(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtCxxIncludeStmt<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, PreambleStmt, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtCxxIncludeStmt(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtCxxTemplateInst<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, String, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtCxxTemplateInst(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtCxxType<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeSpec, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtCxxType(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtCxxTypeKind<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, CxxTypeKind, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtCxxTypeKind(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtID<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, String, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtID(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtIncludeStmt<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, PreambleStmt, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtIncludeStmt(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtManagerList<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<String>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtManagerList(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtManagersStmtOpt<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<String>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtManagersStmtOpt(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtManagesStmt<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, String, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtManagesStmt(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtManagesStmt_3f<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<String>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtManagesStmt_3f(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageBody<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MessageDecl, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageBody(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageDecl<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MessageDecl, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageDecl(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageDeclThing<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MessageDecl, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageDeclThing(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageDeclThing_2a<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<MessageDecl>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageDeclThing_2a(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageDeclThing_2b<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<MessageDecl>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageDeclThing_2b(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageDirectionLabel<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageDirectionLabel(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageId<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, String, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageId(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageModifier<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MessageModifier, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageModifier(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageModifier_2a<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<MessageModifier>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageModifier_2a(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageModifier_2b<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<MessageModifier>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageModifier_2b(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtMessageOutParams<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Param>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtMessageOutParams(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtNamespaceThing<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<(Namespace, TopLevelDecl)>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtNamespaceThing(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtNamespaceThing_2b<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<Vec<(Namespace, TopLevelDecl)>>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtNamespaceThing_2b(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtNesting<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Nesting, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtNesting(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtParam<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Param, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtParam(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtParamList<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Param>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtParamList(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtPreamble<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<PreambleStmt>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtPreamble(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtPreambleStmt<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, PreambleStmt, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtPreambleStmt(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtPriority<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Priority, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtPriority(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtProtocolDefn<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (Namespace, Protocol), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtProtocolDefn(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtProtocolSendSemanticsQual<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (Nesting, SendSemantics), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtProtocolSendSemanticsQual(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtProtocolSendSemanticsQual_3f<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<(Nesting, SendSemantics)>, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtProtocolSendSemanticsQual_3f(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtQualifiedID<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, QualifiedId, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtQualifiedID(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtSTRING<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, String, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtSTRING(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtSendQualifier<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (Option<Nesting>, Option<Priority>), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtSendQualifier(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtSendQualifierList<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (Option<Nesting>, Option<Priority>), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtSendQualifierList(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtSendSemanticsQual<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (Nesting, Priority, SendSemantics), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtSendSemanticsQual(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtStructDecl<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (Namespace, Vec<StructField>), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtStructDecl(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtStructField<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, StructField, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtStructField(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtTranslationUnit<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TranslationUnit, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtTranslationUnit(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtType<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeSpec, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtType(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtUnionDecl<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (Namespace, Vec<TypeSpec>), usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtUnionDecl(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_NtUsingStmt<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, PreambleStmt, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::NtUsingStmt(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
fn ___pop_Nt______TranslationUnit<
'input,
>(
___symbols: &mut ::std::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TranslationUnit, usize) {
match ___symbols.pop().unwrap() {
(___l, ___Symbol::Nt______TranslationUnit(___v), ___r) => (___l, ___v, ___r),
_ => panic!("symbol type mismatch")
}
}
}
pub use self::___parse___TranslationUnit::parse_TranslationUnit;
mod ___intern_token {
extern crate lalrpop_util as ___lalrpop_util;
pub struct ___Matcher<'input> {
text: &'input str,
consumed: usize,
}
fn ___tokenize(text: &str) -> Option<(usize, usize)> {
let mut ___chars = text.char_indices();
let mut ___current_match: Option<(usize, usize)> = None;
let mut ___current_state: usize = 0;
loop {
match ___current_state {
0 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
34 => /* '\"' */ {
___current_state = 1;
continue;
}
40 => /* '(' */ {
___current_match = Some((0, ___index + 1));
___current_state = 2;
continue;
}
41 => /* ')' */ {
___current_match = Some((1, ___index + 1));
___current_state = 3;
continue;
}
44 => /* ',' */ {
___current_match = Some((2, ___index + 1));
___current_state = 4;
continue;
}
58 => /* ':' */ {
___current_match = Some((3, ___index + 1));
___current_state = 5;
continue;
}
59 => /* ';' */ {
___current_match = Some((5, ___index + 1));
___current_state = 6;
continue;
}
60 => /* '<' */ {
___current_match = Some((6, ___index + 1));
___current_state = 7;
continue;
}
62 => /* '>' */ {
___current_match = Some((7, ___index + 1));
___current_state = 8;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 9;
continue;
}
91 => /* '[' */ {
___current_match = Some((8, ___index + 1));
___current_state = 10;
continue;
}
93 => /* ']' */ {
___current_match = Some((9, ___index + 1));
___current_state = 11;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 12;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 13;
continue;
}
98 => /* 'b' */ {
___current_match = Some((44, ___index + 1));
___current_state = 14;
continue;
}
99 => /* 'c' */ {
___current_match = Some((44, ___index + 1));
___current_state = 15;
continue;
}
100 ... 101 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 9;
continue;
}
102 => /* 'f' */ {
___current_match = Some((44, ___index + 1));
___current_state = 16;
continue;
}
103 => /* 'g' */ {
___current_match = Some((44, ___index + 1));
___current_state = 9;
continue;
}
104 => /* 'h' */ {
___current_match = Some((44, ___index + 1));
___current_state = 17;
continue;
}
105 => /* 'i' */ {
___current_match = Some((44, ___index + 1));
___current_state = 18;
continue;
}
106 ... 108 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 9;
continue;
}
109 => /* 'm' */ {
___current_match = Some((44, ___index + 1));
___current_state = 19;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 20;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 21;
continue;
}
112 => /* 'p' */ {
___current_match = Some((44, ___index + 1));
___current_state = 22;
continue;
}
113 => /* 'q' */ {
___current_match = Some((44, ___index + 1));
___current_state = 9;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 23;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 24;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 9;
continue;
}
117 => /* 'u' */ {
___current_match = Some((44, ___index + 1));
___current_state = 25;
continue;
}
118 => /* 'v' */ {
___current_match = Some((44, ___index + 1));
___current_state = 26;
continue;
}
119 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 9;
continue;
}
123 => /* '{' */ {
___current_match = Some((41, ___index + 1));
___current_state = 27;
continue;
}
125 => /* '}' */ {
___current_match = Some((42, ___index + 1));
___current_state = 28;
continue;
}
_ => {
return ___current_match;
}
}
}
1 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
0 ... 9 => {
___current_state = 30;
continue;
}
11 ... 33 => {
___current_state = 30;
continue;
}
34 => /* '\"' */ {
___current_match = Some((43, ___index + 1));
___current_state = 31;
continue;
}
35 ... 1114111 => {
___current_state = 30;
continue;
}
_ => {
return ___current_match;
}
}
}
2 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
3 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
4 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
5 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
58 => /* ':' */ {
___current_match = Some((4, ___index + 1));
___current_state = 32;
continue;
}
_ => {
return ___current_match;
}
}
}
6 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
7 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
8 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
9 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
10 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
11 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
12 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 34;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
13 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 35;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
14 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 36;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
15 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 103 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
104 => /* 'h' */ {
___current_match = Some((44, ___index + 1));
___current_state = 37;
continue;
}
105 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((44, ___index + 1));
___current_state = 38;
continue;
}
109 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 39;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
16 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 40;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
17 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 104 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
105 => /* 'i' */ {
___current_match = Some((44, ___index + 1));
___current_state = 41;
continue;
}
106 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
18 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 42;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
19 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 43;
continue;
}
98 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
20 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 44;
continue;
}
98 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 45;
continue;
}
102 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 46;
continue;
}
112 ... 116 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
117 => /* 'u' */ {
___current_match = Some((44, ___index + 1));
___current_state = 47;
continue;
}
118 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
21 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((30, ___index + 1));
___current_state = 48;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
22 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 49;
continue;
}
98 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 50;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
23 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 51;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
24 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 52;
continue;
}
117 ... 120 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
121 => /* 'y' */ {
___current_match = Some((44, ___index + 1));
___current_state = 53;
continue;
}
122 => /* 'z' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
25 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 54;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
112 => /* 'p' */ {
___current_match = Some((44, ___index + 1));
___current_state = 55;
continue;
}
113 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 56;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
26 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 57;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
27 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
28 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
29 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
30 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
0 ... 9 => {
___current_state = 30;
continue;
}
11 ... 33 => {
___current_state = 30;
continue;
}
34 => /* '\"' */ {
___current_match = Some((43, ___index + 1));
___current_state = 31;
continue;
}
35 ... 1114111 => {
___current_state = 30;
continue;
}
_ => {
return ___current_match;
}
}
}
31 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
32 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
_ => {
return ___current_match;
}
}
}
33 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
34 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 99 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
100 => /* 'd' */ {
___current_match = Some((44, ___index + 1));
___current_state = 58;
continue;
}
101 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
35 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 120 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
121 => /* 'y' */ {
___current_match = Some((44, ___index + 1));
___current_state = 59;
continue;
}
122 => /* 'z' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
36 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 60;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
37 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 104 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
105 => /* 'i' */ {
___current_match = Some((44, ___index + 1));
___current_state = 61;
continue;
}
106 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
38 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 62;
continue;
}
98 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
39 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 108 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
109 => /* 'm' */ {
___current_match = Some((44, ___index + 1));
___current_state = 63;
continue;
}
110 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
40 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 64;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
41 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 102 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
103 => /* 'g' */ {
___current_match = Some((44, ___index + 1));
___current_state = 65;
continue;
}
104 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
42 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 98 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
99 => /* 'c' */ {
___current_match = Some((44, ___index + 1));
___current_state = 66;
continue;
}
100 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 67;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 68;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
43 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 69;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
44 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 108 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
109 => /* 'm' */ {
___current_match = Some((44, ___index + 1));
___current_state = 70;
continue;
}
110 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
45 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 71;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
46 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 72;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((28, ___index + 1));
___current_state = 73;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
47 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((44, ___index + 1));
___current_state = 74;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
48 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
49 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 75;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
50 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 104 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
105 => /* 'i' */ {
___current_match = Some((44, ___index + 1));
___current_state = 76;
continue;
}
106 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 77;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
51 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 78;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
52 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 79;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
53 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 80;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
54 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 104 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
105 => /* 'i' */ {
___current_match = Some((44, ___index + 1));
___current_state = 81;
continue;
}
106 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
55 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 82;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
56 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 104 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
105 => /* 'i' */ {
___current_match = Some((44, ___index + 1));
___current_state = 83;
continue;
}
106 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
57 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 84;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
58 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 85;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
59 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 86;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
60 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 103 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
104 => /* 'h' */ {
___current_match = Some((12, ___index + 1));
___current_state = 87;
continue;
}
105 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
61 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((44, ___index + 1));
___current_state = 88;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
62 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 89;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
63 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 111 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
112 => /* 'p' */ {
___current_match = Some((44, ___index + 1));
___current_state = 90;
continue;
}
113 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
64 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 108 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
109 => /* 'm' */ {
___current_match = Some((17, ___index + 1));
___current_state = 91;
continue;
}
110 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
65 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 103 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
104 => /* 'h' */ {
___current_match = Some((18, ___index + 1));
___current_state = 92;
continue;
}
105 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
66 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((44, ___index + 1));
___current_state = 93;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
67 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 104 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
105 => /* 'i' */ {
___current_match = Some((44, ___index + 1));
___current_state = 94;
continue;
}
106 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
68 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((22, ___index + 1));
___current_state = 95;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
69 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 96;
continue;
}
98 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
70 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 97;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
71 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 98;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
72 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 108 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
109 => /* 'm' */ {
___current_match = Some((44, ___index + 1));
___current_state = 99;
continue;
}
110 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
73 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
74 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((44, ___index + 1));
___current_state = 100;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
75 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 101;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
76 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((32, ___index + 1));
___current_state = 102;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
77 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 103;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
78 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 116 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
117 => /* 'u' */ {
___current_match = Some((44, ___index + 1));
___current_state = 104;
continue;
}
118 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
79 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 116 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
117 => /* 'u' */ {
___current_match = Some((44, ___index + 1));
___current_state = 105;
continue;
}
118 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
80 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 98 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
99 => /* 'c' */ {
___current_match = Some((36, ___index + 1));
___current_state = 106;
continue;
}
100 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
81 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 107;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
82 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((38, ___index + 1));
___current_state = 108;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
83 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 109;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
84 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 104 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
105 => /* 'i' */ {
___current_match = Some((44, ___index + 1));
___current_state = 110;
continue;
}
106 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
85 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((44, ___index + 1));
___current_state = 111;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
86 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 98 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
99 => /* 'c' */ {
___current_match = Some((11, ___index + 1));
___current_state = 112;
continue;
}
100 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
87 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
88 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 99 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
100 => /* 'd' */ {
___current_match = Some((13, ___index + 1));
___current_state = 113;
continue;
}
101 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
89 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((14, ___index + 1));
___current_state = 114;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
90 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 115;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
91 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
92 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
93 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 116 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
117 => /* 'u' */ {
___current_match = Some((44, ___index + 1));
___current_state = 116;
continue;
}
118 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
94 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 99 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
100 => /* 'd' */ {
___current_match = Some((44, ___index + 1));
___current_state = 117;
continue;
}
101 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
95 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
96 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 102 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
103 => /* 'g' */ {
___current_match = Some((44, ___index + 1));
___current_state = 118;
continue;
}
104 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
97 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 119;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
98 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 120;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
99 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 121;
continue;
}
98 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
100 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 122;
continue;
}
98 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
101 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 123;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
102 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
103 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 124;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
104 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((44, ___index + 1));
___current_state = 125;
continue;
}
115 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
105 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 98 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
99 => /* 'c' */ {
___current_match = Some((44, ___index + 1));
___current_state = 126;
continue;
}
100 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
106 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
107 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((37, ___index + 1));
___current_state = 127;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
108 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
109 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 102 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
103 => /* 'g' */ {
___current_match = Some((39, ___index + 1));
___current_state = 128;
continue;
}
104 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
110 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 101 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
102 => /* 'f' */ {
___current_match = Some((44, ___index + 1));
___current_state = 129;
continue;
}
103 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
111 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 130;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
112 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
113 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
114 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
115 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 131;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
116 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 99 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
100 => /* 'd' */ {
___current_match = Some((44, ___index + 1));
___current_state = 132;
continue;
}
101 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
117 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 133;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
118 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 134;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
119 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 111 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
112 => /* 'p' */ {
___current_match = Some((44, ___index + 1));
___current_state = 135;
continue;
}
113 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
120 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 99 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
100 => /* 'd' */ {
___current_match = Some((26, ___index + 1));
___current_state = 136;
continue;
}
101 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
121 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((27, ___index + 1));
___current_state = 137;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
122 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
98 => /* 'b' */ {
___current_match = Some((44, ___index + 1));
___current_state = 138;
continue;
}
99 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
123 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((31, ___index + 1));
___current_state = 139;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
124 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 98 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
99 => /* 'c' */ {
___current_match = Some((44, ___index + 1));
___current_state = 140;
continue;
}
100 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
125 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 141;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
126 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((35, ___index + 1));
___current_state = 142;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
127 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
128 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
129 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 120 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
121 => /* 'y' */ {
___current_match = Some((40, ___index + 1));
___current_state = 143;
continue;
}
122 => /* 'z' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
130 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 115 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
116 => /* 't' */ {
___current_match = Some((44, ___index + 1));
___current_state = 144;
continue;
}
117 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
131 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 145;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
132 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((19, ___index + 1));
___current_state = 146;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
133 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 147;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
134 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 113 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
114 => /* 'r' */ {
___current_match = Some((23, ___index + 1));
___current_state = 148;
continue;
}
115 => /* 's' */ {
___current_match = Some((24, ___index + 1));
___current_state = 149;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
135 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 150;
continue;
}
98 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
136 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
137 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
138 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((44, ___index + 1));
___current_state = 151;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
139 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
140 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 152;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
141 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((34, ___index + 1));
___current_state = 153;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
142 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
143 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
144 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((44, ___index + 1));
___current_state = 154;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
145 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((15, ___index + 1));
___current_state = 155;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
146 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
147 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 98 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
99 => /* 'c' */ {
___current_match = Some((44, ___index + 1));
___current_state = 156;
continue;
}
100 ... 114 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
115 => /* 's' */ {
___current_match = Some((44, ___index + 1));
___current_state = 157;
continue;
}
116 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
148 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
149 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
150 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 98 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
99 => /* 'c' */ {
___current_match = Some((44, ___index + 1));
___current_state = 158;
continue;
}
100 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
151 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((29, ___index + 1));
___current_state = 159;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
152 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((33, ___index + 1));
___current_state = 160;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
153 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
154 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 161;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
155 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 => /* 'a' */ {
___current_match = Some((44, ___index + 1));
___current_state = 162;
continue;
}
98 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
156 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 111 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
112 => /* 'p' */ {
___current_match = Some((44, ___index + 1));
___current_state = 163;
continue;
}
113 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
157 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 120 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
121 => /* 'y' */ {
___current_match = Some((44, ___index + 1));
___current_state = 164;
continue;
}
122 => /* 'z' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
158 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 100 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
101 => /* 'e' */ {
___current_match = Some((25, ___index + 1));
___current_state = 165;
continue;
}
102 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
159 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
160 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
161 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((10, ___index + 1));
___current_state = 166;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
162 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((44, ___index + 1));
___current_state = 167;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
163 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 110 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
111 => /* 'o' */ {
___current_match = Some((44, ___index + 1));
___current_state = 168;
continue;
}
112 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
164 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 109 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
110 => /* 'n' */ {
___current_match = Some((44, ___index + 1));
___current_state = 169;
continue;
}
111 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
165 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
166 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
167 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 107 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
108 => /* 'l' */ {
___current_match = Some((16, ___index + 1));
___current_state = 170;
continue;
}
109 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
168 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 118 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
119 => /* 'w' */ {
___current_match = Some((20, ___index + 1));
___current_state = 171;
continue;
}
120 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
169 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 98 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
99 => /* 'c' */ {
___current_match = Some((21, ___index + 1));
___current_state = 172;
continue;
}
100 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
170 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
171 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
172 => {
let (___index, ___ch) = match ___chars.next() { Some(p) => p, None => return ___current_match };
match ___ch as u32 {
48 ... 57 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
65 ... 90 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
95 => /* '_' */ {
___current_match = Some((44, ___index + 1));
___current_state = 33;
continue;
}
97 ... 122 => {
___current_match = Some((44, ___index + ___ch.len_utf8()));
___current_state = 33;
continue;
}
_ => {
return ___current_match;
}
}
}
_ => { panic!("invalid state {}", ___current_state); }
}
}
}
impl<'input> ___Matcher<'input> {
pub fn new(s: &'input str) -> ___Matcher<'input> {
___Matcher { text: s, consumed: 0 }
}
}
impl<'input> Iterator for ___Matcher<'input> {
type Item = Result<(usize, (usize, &'input str), usize), ___lalrpop_util::ParseError<usize,(usize, &'input str),()>>;
fn next(&mut self) -> Option<Self::Item> {
let ___text = self.text.trim_left();
let ___whitespace = self.text.len() - ___text.len();
let ___start_offset = self.consumed + ___whitespace;
if ___text.is_empty() {
self.text = ___text;
self.consumed = ___start_offset;
None
} else {
match ___tokenize(___text) {
Some((___index, ___length)) => {
let ___result = &___text[..___length];
let ___remaining = &___text[___length..];
let ___end_offset = ___start_offset + ___length;
self.text = ___remaining;
self.consumed = ___end_offset;
Some(Ok((___start_offset, (___index, ___result), ___end_offset)))
}
None => {
Some(Err(___lalrpop_util::ParseError::InvalidToken { location: ___start_offset }))
}
}
}
}
}
}
#[allow(unused_variables)]
pub fn ___action0<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, TranslationUnit, usize),
) -> TranslationUnit
{
(___0)
}
#[allow(unused_variables)]
pub fn ___action1<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, s, _): (usize, &'input str, usize),
) -> String
{
String::from(s)
}
#[allow(unused_variables)]
pub fn ___action2<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, s, _): (usize, &'input str, usize),
) -> String
{
String::from(s)
}
#[allow(unused_variables)]
pub fn ___action3<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, p, _): (usize, Vec<PreambleStmt>, usize),
(_, ns, _): (usize, ::std::vec::Vec<Vec<(Namespace, TopLevelDecl)>>, usize),
) -> TranslationUnit
{
{
let mut decls = Vec::new();
for mut d in ns {
decls.append(&mut d)
}
TranslationUnit { preamble: p, declarations: decls }
}
}
#[allow(unused_variables)]
pub fn ___action4<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, ::std::vec::Vec<(PreambleStmt, &'input str)>, usize),
) -> Vec<PreambleStmt>
{
{
let mut v = Vec::new();
for (p, _) in ___0 {
v.push(p);
}
v
}
}
#[allow(unused_variables)]
pub fn ___action5<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, PreambleStmt, usize),
) -> PreambleStmt
{
(___0)
}
#[allow(unused_variables)]
pub fn ___action6<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, PreambleStmt, usize),
) -> PreambleStmt
{
(___0)
}
#[allow(unused_variables)]
pub fn ___action7<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, PreambleStmt, usize),
) -> PreambleStmt
{
(___0)
}
#[allow(unused_variables)]
pub fn ___action8<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, file, _): (usize, String, usize),
) -> PreambleStmt
{
PreambleStmt::CxxInclude(file)
}
#[allow(unused_variables)]
pub fn ___action9<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
(_, id, _): (usize, String, usize),
) -> PreambleStmt
{
PreambleStmt::Include(IncludeType::Protocol, id) /* resolveIncludePath etc. */
}
#[allow(unused_variables)]
pub fn ___action10<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, id, _): (usize, String, usize),
) -> PreambleStmt
{
PreambleStmt::Include(IncludeType::Header, id)
}
#[allow(unused_variables)]
pub fn ___action11<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, t, _): (usize, TypeSpec, usize),
(_, _, _): (usize, &'input str, usize),
(_, h, _): (usize, String, usize),
) -> PreambleStmt
{
PreambleStmt::Using { cxx_type: t, header: h, kind: None }
}
#[allow(unused_variables)]
pub fn ___action12<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, k, _): (usize, CxxTypeKind, usize),
(_, t, _): (usize, TypeSpec, usize),
(_, _, _): (usize, &'input str, usize),
(_, h, _): (usize, String, usize),
) -> PreambleStmt
{
PreambleStmt::Using { cxx_type: t, header: h, kind: Some(k) }
}
#[allow(unused_variables)]
pub fn ___action13<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> CxxTypeKind
{
CxxTypeKind::Class
}
#[allow(unused_variables)]
pub fn ___action14<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> CxxTypeKind
{
CxxTypeKind::Struct
}
#[allow(unused_variables)]
pub fn ___action15<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, name, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
(_, many_things, _): (usize, ::std::vec::Vec<Vec<(Namespace, TopLevelDecl)>>, usize),
(_, _, _): (usize, &'input str, usize),
) -> Vec<(Namespace, TopLevelDecl)>
{
{
let mut things = Vec::new();
for old_things in many_things {
for (mut ns, node) in old_things {
ns.add_outer_namespace(&name);
things.push((ns, node))
}
}
things
}
}
#[allow(unused_variables)]
pub fn ___action16<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, s, _): (usize, (Namespace, Vec<StructField>), usize),
) -> Vec<(Namespace, TopLevelDecl)>
{
vec![(s.0, TopLevelDecl::Struct(s.1))]
}
#[allow(unused_variables)]
pub fn ___action17<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, u, _): (usize, (Namespace, Vec<TypeSpec>), usize),
) -> Vec<(Namespace, TopLevelDecl)>
{
vec![(u.0, TopLevelDecl::Union(u.1))]
}
#[allow(unused_variables)]
pub fn ___action18<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, p, _): (usize, (Namespace, Protocol), usize),
) -> Vec<(Namespace, TopLevelDecl)>
{
vec![(p.0, TopLevelDecl::Protocol(p.1))]
}
#[allow(unused_variables)]
pub fn ___action19<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, name, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
(_, raw_fields, _): (usize, ::std::vec::Vec<(StructField, &'input str)>, usize),
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
) -> (Namespace, Vec<StructField>)
{
{
let mut fields = Vec::new();
for (f, _) in raw_fields {
fields.push(f);
}
(Namespace::new(name), fields)
}
}
#[allow(unused_variables)]
pub fn ___action20<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, t, _): (usize, TypeSpec, usize),
(_, field_name, _): (usize, String, usize),
) -> StructField
{
StructField::new(t, field_name)
}
#[allow(unused_variables)]
pub fn ___action21<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, name, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
(_, raw_components, _): (usize, ::std::vec::Vec<(TypeSpec, &'input str)>, usize),
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
) -> (Namespace, Vec<TypeSpec>)
{
{
let mut components = Vec::new();
for (c, _) in raw_components {
components.push(c);
}
(Namespace::new(name), components)
}
}
#[allow(unused_variables)]
pub fn ___action22<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, q, _): (usize, ::std::option::Option<(Nesting, SendSemantics)>, usize),
(_, _, _): (usize, &'input str, usize),
(_, name, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
(_, managers, _): (usize, Vec<String>, usize),
(_, manages, _): (usize, ::std::option::Option<String>, usize),
(_, decls, _): (usize, ::std::vec::Vec<MessageDecl>, usize),
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
{
let (nesting, send_semantics) = q.unwrap_or((Nesting::None, SendSemantics::Async));
(Namespace::new(name), Protocol::new(send_semantics, nesting, managers, manages, decls))
}
}
#[allow(unused_variables)]
pub fn ___action23<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, l, _): (usize, Vec<String>, usize),
(_, _, _): (usize, &'input str, usize),
) -> Vec<String>
{
l
}
#[allow(unused_variables)]
pub fn ___action24<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<String>
{
Vec::new()
}
#[allow(unused_variables)]
pub fn ___action25<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, name, _): (usize, String, usize),
) -> Vec<String>
{
vec![name]
}
#[allow(unused_variables)]
pub fn ___action26<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, l, _): (usize, Vec<String>, usize),
(_, _, _): (usize, &'input str, usize),
(_, name, _): (usize, String, usize),
) -> Vec<String>
{
{
let mut l = l;
l.push(name);
l
}
}
#[allow(unused_variables)]
pub fn ___action27<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, name, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
) -> String
{
name
}
#[allow(unused_variables)]
pub fn ___action28<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, (), usize),
(_, _, _): (usize, &'input str, usize),
(_, m, _): (usize, MessageDecl, usize),
(_, _, _): (usize, &'input str, usize),
) -> MessageDecl
{
m
}
#[allow(unused_variables)]
pub fn ___action29<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, m, _): (usize, MessageDecl, usize),
(_, _, _): (usize, &'input str, usize),
) -> MessageDecl
{
m
}
#[allow(unused_variables)]
pub fn ___action30<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> ()
{
parser_state.direction.set(Some(Direction::In))
}
#[allow(unused_variables)]
pub fn ___action31<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> ()
{
parser_state.direction.set(Some(Direction::Out))
}
#[allow(unused_variables)]
pub fn ___action32<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> ()
{
parser_state.direction.set(Some(Direction::InOut))
}
#[allow(unused_variables)]
pub fn ___action33<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, qual, _): (usize, (Nesting, Priority, SendSemantics), usize),
(_, msg, _): (usize, MessageDecl, usize),
) -> MessageDecl
{
{
let mut msg = msg;
msg.nesting = qual.0;
msg.prio = qual.1;
msg.send_semantics = qual.2;
if parser_state.direction.get().is_none() {
panic!("Missing message direction.");
}
msg.direction = parser_state.direction.get().clone();
msg
}
}
#[allow(unused_variables)]
pub fn ___action34<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, name, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
(_, in_params, _): (usize, Vec<Param>, usize),
(_, _, _): (usize, &'input str, usize),
(_, out_params, _): (usize, Vec<Param>, usize),
(_, modifiers, _): (usize, ::std::vec::Vec<MessageModifier>, usize),
) -> MessageDecl
{
{
let mut decl = MessageDecl::new(name);
decl.add_in_params(in_params);
decl.add_out_params(out_params);
decl.add_modifiers(modifiers);
decl
}
}
#[allow(unused_variables)]
pub fn ___action35<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, id, _): (usize, String, usize),
) -> String
{
id
}
#[allow(unused_variables)]
pub fn ___action36<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> String
{
String::from("__delete__")
}
#[allow(unused_variables)]
pub fn ___action37<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
(_, l, _): (usize, Vec<Param>, usize),
(_, _, _): (usize, &'input str, usize),
) -> Vec<Param>
{
l
}
#[allow(unused_variables)]
pub fn ___action38<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Param>
{
Vec::new()
}
#[allow(unused_variables)]
pub fn ___action39<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> MessageModifier
{
MessageModifier::Verify
}
#[allow(unused_variables)]
pub fn ___action40<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> MessageModifier
{
MessageModifier::Compress(Compress::Enabled)
}
#[allow(unused_variables)]
pub fn ___action41<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> MessageModifier
{
MessageModifier::Compress(Compress::All)
}
#[allow(unused_variables)]
pub fn ___action42<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> Nesting
{
Nesting::None
}
#[allow(unused_variables)]
pub fn ___action43<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> Nesting
{
Nesting::InsideSync
}
#[allow(unused_variables)]
pub fn ___action44<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> Nesting
{
Nesting::InsideCpow
}
#[allow(unused_variables)]
pub fn ___action45<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> Priority
{
Priority::Normal
}
#[allow(unused_variables)]
pub fn ___action46<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> Priority
{
Priority::High
}
#[allow(unused_variables)]
pub fn ___action47<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
(_, n, _): (usize, Nesting, usize),
(_, _, _): (usize, &'input str, usize),
) -> (Option<Nesting>, Option<Priority>)
{
(Some(n), None)
}
#[allow(unused_variables)]
pub fn ___action48<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
(_, p, _): (usize, Priority, usize),
(_, _, _): (usize, &'input str, usize),
) -> (Option<Nesting>, Option<Priority>)
{
(None, Some(p))
}
#[allow(unused_variables)]
pub fn ___action49<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, q, _): (usize, (Option<Nesting>, Option<Priority>), usize),
(_, l, _): (usize, (Option<Nesting>, Option<Priority>), usize),
) -> (Option<Nesting>, Option<Priority>)
{
(l.0.or(q.0), l.1.or(q.1))
}
#[allow(unused_variables)]
pub fn ___action50<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> (Option<Nesting>, Option<Priority>)
{
(None, None)
}
#[allow(unused_variables)]
pub fn ___action51<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, l, _): (usize, (Option<Nesting>, Option<Priority>), usize),
(_, _, _): (usize, &'input str, usize),
) -> (Nesting, Priority, SendSemantics)
{
(l.0.unwrap_or(Nesting::None),
l.1.unwrap_or(Priority::Normal),
SendSemantics::Async)
}
#[allow(unused_variables)]
pub fn ___action52<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, l, _): (usize, (Option<Nesting>, Option<Priority>), usize),
(_, _, _): (usize, &'input str, usize),
) -> (Nesting, Priority, SendSemantics)
{
(l.0.unwrap_or(Nesting::None),
l.1.unwrap_or(Priority::Normal),
SendSemantics::Sync)
}
#[allow(unused_variables)]
pub fn ___action53<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> (Nesting, Priority, SendSemantics)
{
(Nesting::None, Priority::Normal, SendSemantics::Intr)
}
#[allow(unused_variables)]
pub fn ___action54<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> (Nesting, SendSemantics)
{
(Nesting::None, SendSemantics::Async)
}
#[allow(unused_variables)]
pub fn ___action55<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> (Nesting, SendSemantics)
{
(Nesting::None, SendSemantics::Sync)
}
#[allow(unused_variables)]
pub fn ___action56<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
(_, n, _): (usize, Nesting, usize),
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
) -> (Nesting, SendSemantics)
{
(n, SendSemantics::Async)
}
#[allow(unused_variables)]
pub fn ___action57<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
(_, n, _): (usize, Nesting, usize),
(_, _, _): (usize, &'input str, usize),
(_, _, _): (usize, &'input str, usize),
) -> (Nesting, SendSemantics)
{
(n, SendSemantics::Async)
}
#[allow(unused_variables)]
pub fn ___action58<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> (Nesting, SendSemantics)
{
(Nesting::None, SendSemantics::Intr)
}
#[allow(unused_variables)]
pub fn ___action59<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, l, _): (usize, Vec<Param>, usize),
(_, _, _): (usize, &'input str, usize),
(_, p, _): (usize, Param, usize),
) -> Vec<Param>
{
{
let mut l = l;
l.push(p);
l
}
}
#[allow(unused_variables)]
pub fn ___action60<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, p, _): (usize, Param, usize),
) -> Vec<Param>
{
vec![p]
}
#[allow(unused_variables)]
pub fn ___action61<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Param>
{
Vec::new()
}
#[allow(unused_variables)]
pub fn ___action62<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, t, _): (usize, TypeSpec, usize),
(_, name, _): (usize, String, usize),
) -> Param
{
Param::new(t, name)
}
#[allow(unused_variables)]
pub fn ___action63<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, is_nullable, _): (usize, ::std::option::Option<&'input str>, usize),
(_, t, _): (usize, TypeSpec, usize),
) -> TypeSpec
{
t.set_nullable(is_nullable.is_some())
}
#[allow(unused_variables)]
pub fn ___action64<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, id, _): (usize, String, usize),
(_, is_array, _): (usize, ::std::option::Option<(&'input str, &'input str)>, usize),
) -> TypeSpec
{
{
TypeSpec::new(QualifiedId::new(id)).set_array(is_array.is_some())
}
}
#[allow(unused_variables)]
pub fn ___action65<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, id, _): (usize, QualifiedId, usize),
) -> TypeSpec
{
TypeSpec::new(id)
}
#[allow(unused_variables)]
pub fn ___action66<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, id, _): (usize, String, usize),
) -> TypeSpec
{
TypeSpec::new(QualifiedId::new(id))
}
#[allow(unused_variables)]
pub fn ___action67<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, qual_id, _): (usize, QualifiedId, usize),
(_, _, _): (usize, &'input str, usize),
(_, id, _): (usize, String, usize),
) -> QualifiedId
{
qual_id.qualify(id)
}
#[allow(unused_variables)]
pub fn ___action68<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, id1, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
(_, id2, _): (usize, String, usize),
) -> QualifiedId
{
QualifiedId::new(id1).qualify(id2)
}
#[allow(unused_variables)]
pub fn ___action69<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, String, usize),
) -> String
{
(___0)
}
#[allow(unused_variables)]
pub fn ___action70<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, String, usize),
) -> String
{
(___0)
}
#[allow(unused_variables)]
pub fn ___action71<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, t_name, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
(_, arg, _): (usize, String, usize),
(_, _, _): (usize, &'input str, usize),
) -> String
{
t_name + "<" + &arg + ">"
}
#[allow(unused_variables)]
pub fn ___action72<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, (&'input str, &'input str), usize),
) -> ::std::option::Option<(&'input str, &'input str)>
{
Some(___0)
}
#[allow(unused_variables)]
pub fn ___action73<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ::std::option::Option<(&'input str, &'input str)>
{
None
}
#[allow(unused_variables)]
pub fn ___action74<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
(_, ___1, _): (usize, &'input str, usize),
) -> (&'input str, &'input str)
{
(___0, ___1)
}
#[allow(unused_variables)]
pub fn ___action75<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> ::std::option::Option<&'input str>
{
Some(___0)
}
#[allow(unused_variables)]
pub fn ___action76<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ::std::option::Option<&'input str>
{
None
}
#[allow(unused_variables)]
pub fn ___action77<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ::std::vec::Vec<MessageModifier>
{
vec![]
}
#[allow(unused_variables)]
pub fn ___action78<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<MessageModifier>, usize),
) -> ::std::vec::Vec<MessageModifier>
{
v
}
#[allow(unused_variables)]
pub fn ___action79<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ::std::vec::Vec<MessageDecl>
{
vec![]
}
#[allow(unused_variables)]
pub fn ___action80<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<MessageDecl>, usize),
) -> ::std::vec::Vec<MessageDecl>
{
v
}
#[allow(unused_variables)]
pub fn ___action81<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, String, usize),
) -> ::std::option::Option<String>
{
Some(___0)
}
#[allow(unused_variables)]
pub fn ___action82<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ::std::option::Option<String>
{
None
}
#[allow(unused_variables)]
pub fn ___action83<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, (Nesting, SendSemantics), usize),
) -> ::std::option::Option<(Nesting, SendSemantics)>
{
Some(___0)
}
#[allow(unused_variables)]
pub fn ___action84<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ::std::option::Option<(Nesting, SendSemantics)>
{
None
}
#[allow(unused_variables)]
pub fn ___action85<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, (TypeSpec, &'input str), usize),
) -> ::std::vec::Vec<(TypeSpec, &'input str)>
{
vec![___0]
}
#[allow(unused_variables)]
pub fn ___action86<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<(TypeSpec, &'input str)>, usize),
(_, e, _): (usize, (TypeSpec, &'input str), usize),
) -> ::std::vec::Vec<(TypeSpec, &'input str)>
{
{ let mut v = v; v.push(e); v }
}
#[allow(unused_variables)]
pub fn ___action87<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, TypeSpec, usize),
(_, ___1, _): (usize, &'input str, usize),
) -> (TypeSpec, &'input str)
{
(___0, ___1)
}
#[allow(unused_variables)]
pub fn ___action88<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ::std::vec::Vec<(StructField, &'input str)>
{
vec![]
}
#[allow(unused_variables)]
pub fn ___action89<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<(StructField, &'input str)>, usize),
) -> ::std::vec::Vec<(StructField, &'input str)>
{
v
}
#[allow(unused_variables)]
pub fn ___action90<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, StructField, usize),
(_, ___1, _): (usize, &'input str, usize),
) -> (StructField, &'input str)
{
(___0, ___1)
}
#[allow(unused_variables)]
pub fn ___action91<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ::std::vec::Vec<(PreambleStmt, &'input str)>
{
vec![]
}
#[allow(unused_variables)]
pub fn ___action92<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<(PreambleStmt, &'input str)>, usize),
) -> ::std::vec::Vec<(PreambleStmt, &'input str)>
{
v
}
#[allow(unused_variables)]
pub fn ___action93<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, PreambleStmt, usize),
(_, ___1, _): (usize, &'input str, usize),
) -> (PreambleStmt, &'input str)
{
(___0, ___1)
}
#[allow(unused_variables)]
pub fn ___action94<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, Vec<(Namespace, TopLevelDecl)>, usize),
) -> ::std::vec::Vec<Vec<(Namespace, TopLevelDecl)>>
{
vec![___0]
}
#[allow(unused_variables)]
pub fn ___action95<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<Vec<(Namespace, TopLevelDecl)>>, usize),
(_, e, _): (usize, Vec<(Namespace, TopLevelDecl)>, usize),
) -> ::std::vec::Vec<Vec<(Namespace, TopLevelDecl)>>
{
{ let mut v = v; v.push(e); v }
}
#[allow(unused_variables)]
pub fn ___action96<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, (PreambleStmt, &'input str), usize),
) -> ::std::vec::Vec<(PreambleStmt, &'input str)>
{
vec![___0]
}
#[allow(unused_variables)]
pub fn ___action97<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<(PreambleStmt, &'input str)>, usize),
(_, e, _): (usize, (PreambleStmt, &'input str), usize),
) -> ::std::vec::Vec<(PreambleStmt, &'input str)>
{
{ let mut v = v; v.push(e); v }
}
#[allow(unused_variables)]
pub fn ___action98<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, (StructField, &'input str), usize),
) -> ::std::vec::Vec<(StructField, &'input str)>
{
vec![___0]
}
#[allow(unused_variables)]
pub fn ___action99<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<(StructField, &'input str)>, usize),
(_, e, _): (usize, (StructField, &'input str), usize),
) -> ::std::vec::Vec<(StructField, &'input str)>
{
{ let mut v = v; v.push(e); v }
}
#[allow(unused_variables)]
pub fn ___action100<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, MessageDecl, usize),
) -> ::std::vec::Vec<MessageDecl>
{
vec![___0]
}
#[allow(unused_variables)]
pub fn ___action101<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<MessageDecl>, usize),
(_, e, _): (usize, MessageDecl, usize),
) -> ::std::vec::Vec<MessageDecl>
{
{ let mut v = v; v.push(e); v }
}
#[allow(unused_variables)]
pub fn ___action102<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, ___0, _): (usize, MessageModifier, usize),
) -> ::std::vec::Vec<MessageModifier>
{
vec![___0]
}
#[allow(unused_variables)]
pub fn ___action103<
'input,
>(
parser_state: &ParserState,
input: &'input str,
(_, v, _): (usize, ::std::vec::Vec<MessageModifier>, usize),
(_, e, _): (usize, MessageModifier, usize),
) -> ::std::vec::Vec<MessageModifier>
{
{ let mut v = v; v.push(e); v }
}
#[allow(unused_variables)]
pub fn ___action104<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, &'input str, usize),
___1: (usize, TypeSpec, usize),
) -> TypeSpec
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action75(
parser_state,
input,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action63(
parser_state,
input,
___temp0,
___1,
)
}
#[allow(unused_variables)]
pub fn ___action105<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, TypeSpec, usize),
) -> TypeSpec
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action76(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action63(
parser_state,
input,
___temp0,
___0,
)
}
#[allow(unused_variables)]
pub fn ___action106<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, &'input str, usize),
___1: (usize, &'input str, usize),
) -> ::std::option::Option<(&'input str, &'input str)>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action74(
parser_state,
input,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action72(
parser_state,
input,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action107<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, String, usize),
___1: (usize, &'input str, usize),
___2: (usize, &'input str, usize),
) -> TypeSpec
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action106(
parser_state,
input,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action64(
parser_state,
input,
___0,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action108<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, String, usize),
) -> TypeSpec
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action73(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action64(
parser_state,
input,
___0,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action109<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, PreambleStmt, usize),
___1: (usize, &'input str, usize),
) -> ::std::vec::Vec<(PreambleStmt, &'input str)>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action93(
parser_state,
input,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action96(
parser_state,
input,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action110<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::vec::Vec<(PreambleStmt, &'input str)>, usize),
___1: (usize, PreambleStmt, usize),
___2: (usize, &'input str, usize),
) -> ::std::vec::Vec<(PreambleStmt, &'input str)>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action93(
parser_state,
input,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action97(
parser_state,
input,
___0,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action111<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<PreambleStmt>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action91(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action4(
parser_state,
input,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action112<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::vec::Vec<(PreambleStmt, &'input str)>, usize),
) -> Vec<PreambleStmt>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action92(
parser_state,
input,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action4(
parser_state,
input,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action113<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, StructField, usize),
___1: (usize, &'input str, usize),
) -> ::std::vec::Vec<(StructField, &'input str)>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action90(
parser_state,
input,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action98(
parser_state,
input,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action114<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::vec::Vec<(StructField, &'input str)>, usize),
___1: (usize, StructField, usize),
___2: (usize, &'input str, usize),
) -> ::std::vec::Vec<(StructField, &'input str)>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action90(
parser_state,
input,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action99(
parser_state,
input,
___0,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action115<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, &'input str, usize),
___1: (usize, String, usize),
___2: (usize, &'input str, usize),
___3: (usize, &'input str, usize),
___4: (usize, &'input str, usize),
) -> (Namespace, Vec<StructField>)
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action88(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action19(
parser_state,
input,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}
#[allow(unused_variables)]
pub fn ___action116<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, &'input str, usize),
___1: (usize, String, usize),
___2: (usize, &'input str, usize),
___3: (usize, ::std::vec::Vec<(StructField, &'input str)>, usize),
___4: (usize, &'input str, usize),
___5: (usize, &'input str, usize),
) -> (Namespace, Vec<StructField>)
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action89(
parser_state,
input,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action19(
parser_state,
input,
___0,
___1,
___2,
___temp0,
___4,
___5,
)
}
#[allow(unused_variables)]
pub fn ___action117<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, TypeSpec, usize),
___1: (usize, &'input str, usize),
) -> ::std::vec::Vec<(TypeSpec, &'input str)>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action87(
parser_state,
input,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action85(
parser_state,
input,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action118<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::vec::Vec<(TypeSpec, &'input str)>, usize),
___1: (usize, TypeSpec, usize),
___2: (usize, &'input str, usize),
) -> ::std::vec::Vec<(TypeSpec, &'input str)>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action87(
parser_state,
input,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action86(
parser_state,
input,
___0,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action119<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::option::Option<(Nesting, SendSemantics)>, usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, String, usize),
___6: (usize, ::std::vec::Vec<MessageDecl>, usize),
___7: (usize, &'input str, usize),
___8: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action81(
parser_state,
input,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action22(
parser_state,
input,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
___8,
)
}
#[allow(unused_variables)]
pub fn ___action120<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::option::Option<(Nesting, SendSemantics)>, usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, ::std::vec::Vec<MessageDecl>, usize),
___6: (usize, &'input str, usize),
___7: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action82(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action22(
parser_state,
input,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
___7,
)
}
#[allow(unused_variables)]
pub fn ___action121<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::option::Option<(Nesting, SendSemantics)>, usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, String, usize),
___6: (usize, &'input str, usize),
___7: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___5.2.clone();
let ___end0 = ___6.0.clone();
let ___temp0 = ___action79(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action119(
parser_state,
input,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___6,
___7,
)
}
#[allow(unused_variables)]
pub fn ___action122<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::option::Option<(Nesting, SendSemantics)>, usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, String, usize),
___6: (usize, ::std::vec::Vec<MessageDecl>, usize),
___7: (usize, &'input str, usize),
___8: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___6.0.clone();
let ___end0 = ___6.2.clone();
let ___temp0 = ___action80(
parser_state,
input,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action119(
parser_state,
input,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___7,
___8,
)
}
#[allow(unused_variables)]
pub fn ___action123<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::option::Option<(Nesting, SendSemantics)>, usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, &'input str, usize),
___6: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action79(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action120(
parser_state,
input,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}
#[allow(unused_variables)]
pub fn ___action124<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, ::std::option::Option<(Nesting, SendSemantics)>, usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, ::std::vec::Vec<MessageDecl>, usize),
___6: (usize, &'input str, usize),
___7: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action80(
parser_state,
input,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action120(
parser_state,
input,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}
#[allow(unused_variables)]
pub fn ___action125<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, String, usize),
___1: (usize, &'input str, usize),
___2: (usize, Vec<Param>, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<Param>, usize),
) -> MessageDecl
{
let ___start0 = ___4.2.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action77(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action34(
parser_state,
input,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action126<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, String, usize),
___1: (usize, &'input str, usize),
___2: (usize, Vec<Param>, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<Param>, usize),
___5: (usize, ::std::vec::Vec<MessageModifier>, usize),
) -> MessageDecl
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action78(
parser_state,
input,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action34(
parser_state,
input,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}
#[allow(unused_variables)]
pub fn ___action127<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, (Nesting, SendSemantics), usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, String, usize),
___6: (usize, &'input str, usize),
___7: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action83(
parser_state,
input,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action121(
parser_state,
input,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}
#[allow(unused_variables)]
pub fn ___action128<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, &'input str, usize),
___1: (usize, String, usize),
___2: (usize, &'input str, usize),
___3: (usize, Vec<String>, usize),
___4: (usize, String, usize),
___5: (usize, &'input str, usize),
___6: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action84(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action121(
parser_state,
input,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}
#[allow(unused_variables)]
pub fn ___action129<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, (Nesting, SendSemantics), usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, String, usize),
___6: (usize, ::std::vec::Vec<MessageDecl>, usize),
___7: (usize, &'input str, usize),
___8: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action83(
parser_state,
input,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action122(
parser_state,
input,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
___8,
)
}
#[allow(unused_variables)]
pub fn ___action130<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, &'input str, usize),
___1: (usize, String, usize),
___2: (usize, &'input str, usize),
___3: (usize, Vec<String>, usize),
___4: (usize, String, usize),
___5: (usize, ::std::vec::Vec<MessageDecl>, usize),
___6: (usize, &'input str, usize),
___7: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action84(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action122(
parser_state,
input,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}
#[allow(unused_variables)]
pub fn ___action131<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, (Nesting, SendSemantics), usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, &'input str, usize),
___6: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action83(
parser_state,
input,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action123(
parser_state,
input,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}
#[allow(unused_variables)]
pub fn ___action132<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, &'input str, usize),
___1: (usize, String, usize),
___2: (usize, &'input str, usize),
___3: (usize, Vec<String>, usize),
___4: (usize, &'input str, usize),
___5: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action84(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action123(
parser_state,
input,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}
#[allow(unused_variables)]
pub fn ___action133<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, (Nesting, SendSemantics), usize),
___1: (usize, &'input str, usize),
___2: (usize, String, usize),
___3: (usize, &'input str, usize),
___4: (usize, Vec<String>, usize),
___5: (usize, ::std::vec::Vec<MessageDecl>, usize),
___6: (usize, &'input str, usize),
___7: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action83(
parser_state,
input,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action124(
parser_state,
input,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}
#[allow(unused_variables)]
pub fn ___action134<
'input,
>(
parser_state: &ParserState,
input: &'input str,
___0: (usize, &'input str, usize),
___1: (usize, String, usize),
___2: (usize, &'input str, usize),
___3: (usize, Vec<String>, usize),
___4: (usize, ::std::vec::Vec<MessageDecl>, usize),
___5: (usize, &'input str, usize),
___6: (usize, &'input str, usize),
) -> (Namespace, Protocol)
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action84(
parser_state,
input,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action124(
parser_state,
input,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}
pub trait ___ToTriple<'input, > {
type Error;
fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),Self::Error>;
}
impl<'input, > ___ToTriple<'input, > for (usize, (usize, &'input str), usize) {
type Error = ();
fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
Ok(value)
}
}
impl<'input, > ___ToTriple<'input, > for Result<(usize, (usize, &'input str), usize),()> {
type Error = ();
fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
value
}
}
